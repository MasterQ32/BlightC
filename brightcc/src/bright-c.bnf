#!emitnone
#!emit declaration
#!emit expression
#!emit int_literal
#!emit float_literal
#!emit string_literal
#!emit unary_expression
#!emit cast_expression
#!emit multiplicative_expression
#!emit additive_expression
#!emit type


_ ::= ([#x20] | [#x0A] | [#x0D] | [#xB])+

id             ::= [A-Za-z_][A-Za-z0-9_]*

int_literal    ::= [0-9]+ | '0' [0-7]+ | '0x' [0-9a-fA-F]+
float_literal  ::= [0-9]* '.' [0-9]+ | [0-9]+ '.' [0-9]*
string_literal ::= '"' ([^"] | '\' . )+ '"'

literal  ::= <float_literal> | <int_literal> | <string_literal>

primary_expression ::= <id> | <literal> | '(' <_>? <expression> <_>? ')'


unary_expression ::= ( '+' | '-' | '&' | '~' | '!' ) <_>? <primary_expression> | <primary_expression>

cast_expression ::= '(' <_>? <type> <_>? ')' <_>? <unary_expression> | <unary_expression>


multiplicative_expression ::= <cast_expression> <_>? ('*' | '/' | '%') <_>? <cast_expression> | <cast_expression>

additive_expression       ::= <multiplicative_expression> <_>? ('+' | '-') <_>? <multiplicative_expression> | <multiplicative_expression>

expression  ::= <additive_expression>

storage_specifier ::= 'export' | 'static' | 'extern'

type_qualifier ::= 'volatile' | 'const' | 'restrict' | 'atomic'

pointer_type ::= <type> <_>? '*'

type ::= (<pointer_type> | <id>) (<_> <type_qualifier>)*

declaration ::= <_>? (<storage_specifier> <_>)* <type> <_> <id> (<_>? '=' <_>? <expression>)? <_>? ';'










# This "must" be last
translation_unit ::= (<declaration> | <_>?)*
