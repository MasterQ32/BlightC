State 0:
          declaration ::= * declaration_specifiers SEMICOLON
          declaration ::= * declaration_specifiers init_declarator_list SEMICOLON
          declaration_specifiers ::= * storage_class_specifier
          declaration_specifiers ::= * storage_class_specifier declaration_specifiers
          declaration_specifiers ::= * type_specifier
          declaration_specifiers ::= * type_specifier declaration_specifiers
          declaration_specifiers ::= * type_qualifier
          declaration_specifiers ::= * type_qualifier declaration_specifiers
          storage_class_specifier ::= * TYPEDEF
          storage_class_specifier ::= * EXTERN
          storage_class_specifier ::= * STATIC
          type_specifier ::= * VOID
          type_specifier ::= * CHAR
          type_specifier ::= * SHORT
          type_specifier ::= * INT
          type_specifier ::= * LONG
          type_specifier ::= * FLOAT
          type_specifier ::= * DOUBLE
          type_specifier ::= * SIGNED
          type_specifier ::= * UNSIGNED
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          type_specifier ::= * TYPE_NAME
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT
          struct_or_union ::= * UNION
          enum_specifier ::= * ENUM LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST
          type_qualifier ::= * VOLATILE
          declarator ::= * pointer direct_declarator
          declarator ::= * direct_declarator
          direct_declarator ::= * IDENTIFIER
          direct_declarator ::= * LPARENS declarator RPARENS
          direct_declarator ::= * direct_declarator LBRACKET constant_expression RBRACE
          direct_declarator ::= * direct_declarator LBRACKET RBRACE
          direct_declarator ::= * direct_declarator LPARENS parameter_type_list RPARENS
          direct_declarator ::= * direct_declarator LPARENS identifier_list RPARENS
          direct_declarator ::= * direct_declarator LPARENS RPARENS
          pointer ::= * MULT
          pointer ::= * MULT type_qualifier_list
          pointer ::= * MULT pointer
          pointer ::= * MULT type_qualifier_list pointer
          brightc_file ::= * translation_unit
          translation_unit ::= * external_declaration
          translation_unit ::= * translation_unit external_declaration
          external_declaration ::= * function_definition
          external_declaration ::= * declaration
          function_definition ::= * declaration_specifiers declarator declaration_list compound_statement
          function_definition ::= * declaration_specifiers declarator compound_statement
          function_definition ::= * declarator declaration_list compound_statement
          function_definition ::= * declarator compound_statement

                    IDENTIFIER shift  266
                       LPARENS shift  92
                          MULT shift  93
                       TYPEDEF shift  282
                        EXTERN shift  281
                        STATIC shift  280
                          VOID shift  308
                          CHAR shift  307
                         SHORT shift  306
                           INT shift  305
                          LONG shift  304
                         FLOAT shift  303
                        DOUBLE shift  302
                        SIGNED shift  301
                      UNSIGNED shift  300
                     TYPE_NAME shift  297
                        STRUCT shift  295
                         UNION shift  294
                          ENUM shift  124
                         CONST shift  274
                      VOLATILE shift  273
                   declaration shift  188
        declaration_specifiers shift  85
       storage_class_specifier shift  68
                type_specifier shift  67
                type_qualifier shift  66
                    declarator shift  52
     struct_or_union_specifier shift  299
                enum_specifier shift  298
               struct_or_union shift  127
                       pointer shift  100
             direct_declarator shift  120
                  brightc_file accept
              translation_unit shift  45
          external_declaration shift  185
           function_definition shift  189

State 1:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression ANDAND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OROR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTIONMARK expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          declaration ::= * declaration_specifiers SEMICOLON
          declaration ::= * declaration_specifiers init_declarator_list SEMICOLON
          declaration_specifiers ::= * storage_class_specifier
          declaration_specifiers ::= * storage_class_specifier declaration_specifiers
          declaration_specifiers ::= * type_specifier
          declaration_specifiers ::= * type_specifier declaration_specifiers
          declaration_specifiers ::= * type_qualifier
          declaration_specifiers ::= * type_qualifier declaration_specifiers
          storage_class_specifier ::= * TYPEDEF
          storage_class_specifier ::= * EXTERN
          storage_class_specifier ::= * STATIC
          type_specifier ::= * VOID
          type_specifier ::= * CHAR
          type_specifier ::= * SHORT
          type_specifier ::= * INT
          type_specifier ::= * LONG
          type_specifier ::= * FLOAT
          type_specifier ::= * DOUBLE
          type_specifier ::= * SIGNED
          type_specifier ::= * UNSIGNED
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          type_specifier ::= * TYPE_NAME
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT
          struct_or_union ::= * UNION
          enum_specifier ::= * ENUM LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST
          type_qualifier ::= * VOLATILE
          statement ::= * labeled_statement
          statement ::= * compound_statement
          statement ::= * expression_statement
          statement ::= * selection_statement
          statement ::= * iteration_statement
          statement ::= * jump_statement
          labeled_statement ::= * IDENTIFIER COLON statement
          labeled_statement ::= * CASE constant_expression COLON statement
          labeled_statement ::= * DEFAULT COLON statement
          compound_statement ::= * LBRACKET RBRACKET
          compound_statement ::= LBRACKET * RBRACKET
          compound_statement ::= * LBRACKET statement_list RBRACKET
          compound_statement ::= LBRACKET * statement_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list RBRACKET
          compound_statement ::= LBRACKET * declaration_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list statement_list RBRACKET
          compound_statement ::= LBRACKET * declaration_list statement_list RBRACKET
          declaration_list ::= * declaration
          declaration_list ::= * declaration_list declaration
          statement_list ::= * statement
          statement_list ::= * statement_list statement
          expression_statement ::= * SEMICOLON
          expression_statement ::= * expression SEMICOLON
          selection_statement ::= * IF LPARENS expression RPARENS statement
          selection_statement ::= * IF LPARENS expression RPARENS statement ELSE statement
          selection_statement ::= * SWITCH LPARENS expression RPARENS statement
          iteration_statement ::= * WHILE LPARENS expression RPARENS statement
          iteration_statement ::= * DO statement WHILE LPARENS expression RPARENS SEMICOLON
          iteration_statement ::= * FOR LPARENS expression_statement expression_statement RPARENS statement
          iteration_statement ::= * FOR LPARENS expression_statement expression_statement expression RPARENS statement
          jump_statement ::= * GOTO IDENTIFIER SEMICOLON
          jump_statement ::= * CONTINUE SEMICOLON
          jump_statement ::= * BREAK SEMICOLON
          jump_statement ::= * RETURN SEMICOLON
          jump_statement ::= * RETURN expression SEMICOLON

                    IDENTIFIER shift  157
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                      LBRACKET shift  1
                      RBRACKET shift  200
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
                     SEMICOLON shift  212
                       TYPEDEF shift  282
                        EXTERN shift  281
                        STATIC shift  280
                          VOID shift  308
                          CHAR shift  307
                         SHORT shift  306
                           INT shift  305
                          LONG shift  304
                         FLOAT shift  303
                        DOUBLE shift  302
                        SIGNED shift  301
                      UNSIGNED shift  300
                     TYPE_NAME shift  297
                        STRUCT shift  295
                         UNION shift  294
                          ENUM shift  124
                         CONST shift  274
                      VOLATILE shift  273
                          CASE shift  35
                       DEFAULT shift  155
                            IF shift  154
                        SWITCH shift  152
                         WHILE shift  151
                            DO shift  9
                           FOR shift  147
                          GOTO shift  146
                      CONTINUE shift  144
                         BREAK shift  143
                        RETURN shift  21
            primary_expression shift  339
                    expression shift  115
            postfix_expression shift  102
         assignment_expression shift  321
              unary_expression shift  98
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  179
        logical_and_expression shift  177
         logical_or_expression shift  129
        conditional_expression shift  322
                   declaration shift  193
        declaration_specifiers shift  82
       storage_class_specifier shift  68
                type_specifier shift  67
                type_qualifier shift  66
     struct_or_union_specifier shift  299
                enum_specifier shift  298
               struct_or_union shift  127
                     statement shift  194
             labeled_statement shift  221
            compound_statement shift  220
          expression_statement shift  219
           selection_statement shift  218
           iteration_statement shift  217
                jump_statement shift  216
                statement_list shift  6
              declaration_list shift  2

State 2:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression ANDAND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OROR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTIONMARK expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          declaration ::= * declaration_specifiers SEMICOLON
          declaration ::= * declaration_specifiers init_declarator_list SEMICOLON
          declaration_specifiers ::= * storage_class_specifier
          declaration_specifiers ::= * storage_class_specifier declaration_specifiers
          declaration_specifiers ::= * type_specifier
          declaration_specifiers ::= * type_specifier declaration_specifiers
          declaration_specifiers ::= * type_qualifier
          declaration_specifiers ::= * type_qualifier declaration_specifiers
          storage_class_specifier ::= * TYPEDEF
          storage_class_specifier ::= * EXTERN
          storage_class_specifier ::= * STATIC
          type_specifier ::= * VOID
          type_specifier ::= * CHAR
          type_specifier ::= * SHORT
          type_specifier ::= * INT
          type_specifier ::= * LONG
          type_specifier ::= * FLOAT
          type_specifier ::= * DOUBLE
          type_specifier ::= * SIGNED
          type_specifier ::= * UNSIGNED
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          type_specifier ::= * TYPE_NAME
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT
          struct_or_union ::= * UNION
          enum_specifier ::= * ENUM LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST
          type_qualifier ::= * VOLATILE
          statement ::= * labeled_statement
          statement ::= * compound_statement
          statement ::= * expression_statement
          statement ::= * selection_statement
          statement ::= * iteration_statement
          statement ::= * jump_statement
          labeled_statement ::= * IDENTIFIER COLON statement
          labeled_statement ::= * CASE constant_expression COLON statement
          labeled_statement ::= * DEFAULT COLON statement
          compound_statement ::= * LBRACKET RBRACKET
          compound_statement ::= * LBRACKET statement_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list RBRACKET
          compound_statement ::= LBRACKET declaration_list * RBRACKET
          compound_statement ::= * LBRACKET declaration_list statement_list RBRACKET
          compound_statement ::= LBRACKET declaration_list * statement_list RBRACKET
          declaration_list ::= declaration_list * declaration
          statement_list ::= * statement
          statement_list ::= * statement_list statement
          expression_statement ::= * SEMICOLON
          expression_statement ::= * expression SEMICOLON
          selection_statement ::= * IF LPARENS expression RPARENS statement
          selection_statement ::= * IF LPARENS expression RPARENS statement ELSE statement
          selection_statement ::= * SWITCH LPARENS expression RPARENS statement
          iteration_statement ::= * WHILE LPARENS expression RPARENS statement
          iteration_statement ::= * DO statement WHILE LPARENS expression RPARENS SEMICOLON
          iteration_statement ::= * FOR LPARENS expression_statement expression_statement RPARENS statement
          iteration_statement ::= * FOR LPARENS expression_statement expression_statement expression RPARENS statement
          jump_statement ::= * GOTO IDENTIFIER SEMICOLON
          jump_statement ::= * CONTINUE SEMICOLON
          jump_statement ::= * BREAK SEMICOLON
          jump_statement ::= * RETURN SEMICOLON
          jump_statement ::= * RETURN expression SEMICOLON

                    IDENTIFIER shift  157
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                      LBRACKET shift  1
                      RBRACKET shift  197
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
                     SEMICOLON shift  212
                       TYPEDEF shift  282
                        EXTERN shift  281
                        STATIC shift  280
                          VOID shift  308
                          CHAR shift  307
                         SHORT shift  306
                           INT shift  305
                          LONG shift  304
                         FLOAT shift  303
                        DOUBLE shift  302
                        SIGNED shift  301
                      UNSIGNED shift  300
                     TYPE_NAME shift  297
                        STRUCT shift  295
                         UNION shift  294
                          ENUM shift  124
                         CONST shift  274
                      VOLATILE shift  273
                          CASE shift  35
                       DEFAULT shift  155
                            IF shift  154
                        SWITCH shift  152
                         WHILE shift  151
                            DO shift  9
                           FOR shift  147
                          GOTO shift  146
                      CONTINUE shift  144
                         BREAK shift  143
                        RETURN shift  21
            primary_expression shift  339
                    expression shift  115
            postfix_expression shift  102
         assignment_expression shift  321
              unary_expression shift  98
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  179
        logical_and_expression shift  177
         logical_or_expression shift  129
        conditional_expression shift  322
                   declaration shift  195
        declaration_specifiers shift  82
       storage_class_specifier shift  68
                type_specifier shift  67
                type_qualifier shift  66
     struct_or_union_specifier shift  299
                enum_specifier shift  298
               struct_or_union shift  127
                     statement shift  194
             labeled_statement shift  221
            compound_statement shift  220
          expression_statement shift  219
           selection_statement shift  218
           iteration_statement shift  217
                jump_statement shift  216
                statement_list shift  5

State 3:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          primary_expression ::= LPARENS * expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_expression ::= SIZEOF LPARENS * type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression ANDAND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OROR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTIONMARK expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          type_specifier ::= * VOID
          type_specifier ::= * CHAR
          type_specifier ::= * SHORT
          type_specifier ::= * INT
          type_specifier ::= * LONG
          type_specifier ::= * FLOAT
          type_specifier ::= * DOUBLE
          type_specifier ::= * SIGNED
          type_specifier ::= * UNSIGNED
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          type_specifier ::= * TYPE_NAME
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT
          struct_or_union ::= * UNION
          specifier_qualifier_list ::= * type_specifier specifier_qualifier_list
          specifier_qualifier_list ::= * type_specifier
          specifier_qualifier_list ::= * type_qualifier specifier_qualifier_list
          specifier_qualifier_list ::= * type_qualifier
          enum_specifier ::= * ENUM LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST
          type_qualifier ::= * VOLATILE
          type_name ::= * specifier_qualifier_list
          type_name ::= * specifier_qualifier_list abstract_declarator

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
                          VOID shift  308
                          CHAR shift  307
                         SHORT shift  306
                           INT shift  305
                          LONG shift  304
                         FLOAT shift  303
                        DOUBLE shift  302
                        SIGNED shift  301
                      UNSIGNED shift  300
                     TYPE_NAME shift  297
                        STRUCT shift  295
                         UNION shift  294
                          ENUM shift  124
                         CONST shift  274
                      VOLATILE shift  273
            primary_expression shift  339
                    expression shift  141
            postfix_expression shift  102
         assignment_expression shift  321
              unary_expression shift  98
                unary_operator shift  81
               cast_expression shift  328
                     type_name shift  183
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  179
        logical_and_expression shift  177
         logical_or_expression shift  129
        conditional_expression shift  322
                type_specifier shift  74
                type_qualifier shift  73
     struct_or_union_specifier shift  299
                enum_specifier shift  298
               struct_or_union shift  127
      specifier_qualifier_list shift  91

State 4:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          primary_expression ::= LPARENS * expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          cast_expression ::= LPARENS * type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression ANDAND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OROR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTIONMARK expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          type_specifier ::= * VOID
          type_specifier ::= * CHAR
          type_specifier ::= * SHORT
          type_specifier ::= * INT
          type_specifier ::= * LONG
          type_specifier ::= * FLOAT
          type_specifier ::= * DOUBLE
          type_specifier ::= * SIGNED
          type_specifier ::= * UNSIGNED
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          type_specifier ::= * TYPE_NAME
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT
          struct_or_union ::= * UNION
          specifier_qualifier_list ::= * type_specifier specifier_qualifier_list
          specifier_qualifier_list ::= * type_specifier
          specifier_qualifier_list ::= * type_qualifier specifier_qualifier_list
          specifier_qualifier_list ::= * type_qualifier
          enum_specifier ::= * ENUM LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST
          type_qualifier ::= * VOLATILE
          type_name ::= * specifier_qualifier_list
          type_name ::= * specifier_qualifier_list abstract_declarator

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
                          VOID shift  308
                          CHAR shift  307
                         SHORT shift  306
                           INT shift  305
                          LONG shift  304
                         FLOAT shift  303
                        DOUBLE shift  302
                        SIGNED shift  301
                      UNSIGNED shift  300
                     TYPE_NAME shift  297
                        STRUCT shift  295
                         UNION shift  294
                          ENUM shift  124
                         CONST shift  274
                      VOLATILE shift  273
            primary_expression shift  339
                    expression shift  141
            postfix_expression shift  102
         assignment_expression shift  321
              unary_expression shift  98
                unary_operator shift  81
               cast_expression shift  328
                     type_name shift  158
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  179
        logical_and_expression shift  177
         logical_or_expression shift  129
        conditional_expression shift  322
                type_specifier shift  74
                type_qualifier shift  73
     struct_or_union_specifier shift  299
                enum_specifier shift  298
               struct_or_union shift  127
      specifier_qualifier_list shift  91

State 5:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression ANDAND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OROR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTIONMARK expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          statement ::= * labeled_statement
          statement ::= * compound_statement
          statement ::= * expression_statement
          statement ::= * selection_statement
          statement ::= * iteration_statement
          statement ::= * jump_statement
          labeled_statement ::= * IDENTIFIER COLON statement
          labeled_statement ::= * CASE constant_expression COLON statement
          labeled_statement ::= * DEFAULT COLON statement
          compound_statement ::= * LBRACKET RBRACKET
          compound_statement ::= * LBRACKET statement_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list statement_list RBRACKET
          compound_statement ::= LBRACKET declaration_list statement_list * RBRACKET
          statement_list ::= statement_list * statement
          expression_statement ::= * SEMICOLON
          expression_statement ::= * expression SEMICOLON
          selection_statement ::= * IF LPARENS expression RPARENS statement
          selection_statement ::= * IF LPARENS expression RPARENS statement ELSE statement
          selection_statement ::= * SWITCH LPARENS expression RPARENS statement
          iteration_statement ::= * WHILE LPARENS expression RPARENS statement
          iteration_statement ::= * DO statement WHILE LPARENS expression RPARENS SEMICOLON
          iteration_statement ::= * FOR LPARENS expression_statement expression_statement RPARENS statement
          iteration_statement ::= * FOR LPARENS expression_statement expression_statement expression RPARENS statement
          jump_statement ::= * GOTO IDENTIFIER SEMICOLON
          jump_statement ::= * CONTINUE SEMICOLON
          jump_statement ::= * BREAK SEMICOLON
          jump_statement ::= * RETURN SEMICOLON
          jump_statement ::= * RETURN expression SEMICOLON

                    IDENTIFIER shift  157
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                      LBRACKET shift  1
                      RBRACKET shift  196
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
                     SEMICOLON shift  212
                          CASE shift  35
                       DEFAULT shift  155
                            IF shift  154
                        SWITCH shift  152
                         WHILE shift  151
                            DO shift  9
                           FOR shift  147
                          GOTO shift  146
                      CONTINUE shift  144
                         BREAK shift  143
                        RETURN shift  21
            primary_expression shift  339
                    expression shift  115
            postfix_expression shift  102
         assignment_expression shift  321
              unary_expression shift  98
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  179
        logical_and_expression shift  177
         logical_or_expression shift  129
        conditional_expression shift  322
                     statement shift  198
             labeled_statement shift  221
            compound_statement shift  220
          expression_statement shift  219
           selection_statement shift  218
           iteration_statement shift  217
                jump_statement shift  216

State 6:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression ANDAND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OROR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTIONMARK expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          statement ::= * labeled_statement
          statement ::= * compound_statement
          statement ::= * expression_statement
          statement ::= * selection_statement
          statement ::= * iteration_statement
          statement ::= * jump_statement
          labeled_statement ::= * IDENTIFIER COLON statement
          labeled_statement ::= * CASE constant_expression COLON statement
          labeled_statement ::= * DEFAULT COLON statement
          compound_statement ::= * LBRACKET RBRACKET
          compound_statement ::= * LBRACKET statement_list RBRACKET
          compound_statement ::= LBRACKET statement_list * RBRACKET
          compound_statement ::= * LBRACKET declaration_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list statement_list RBRACKET
          statement_list ::= statement_list * statement
          expression_statement ::= * SEMICOLON
          expression_statement ::= * expression SEMICOLON
          selection_statement ::= * IF LPARENS expression RPARENS statement
          selection_statement ::= * IF LPARENS expression RPARENS statement ELSE statement
          selection_statement ::= * SWITCH LPARENS expression RPARENS statement
          iteration_statement ::= * WHILE LPARENS expression RPARENS statement
          iteration_statement ::= * DO statement WHILE LPARENS expression RPARENS SEMICOLON
          iteration_statement ::= * FOR LPARENS expression_statement expression_statement RPARENS statement
          iteration_statement ::= * FOR LPARENS expression_statement expression_statement expression RPARENS statement
          jump_statement ::= * GOTO IDENTIFIER SEMICOLON
          jump_statement ::= * CONTINUE SEMICOLON
          jump_statement ::= * BREAK SEMICOLON
          jump_statement ::= * RETURN SEMICOLON
          jump_statement ::= * RETURN expression SEMICOLON

                    IDENTIFIER shift  157
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                      LBRACKET shift  1
                      RBRACKET shift  199
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
                     SEMICOLON shift  212
                          CASE shift  35
                       DEFAULT shift  155
                            IF shift  154
                        SWITCH shift  152
                         WHILE shift  151
                            DO shift  9
                           FOR shift  147
                          GOTO shift  146
                      CONTINUE shift  144
                         BREAK shift  143
                        RETURN shift  21
            primary_expression shift  339
                    expression shift  115
            postfix_expression shift  102
         assignment_expression shift  321
              unary_expression shift  98
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  179
        logical_and_expression shift  177
         logical_or_expression shift  129
        conditional_expression shift  322
                     statement shift  198
             labeled_statement shift  221
            compound_statement shift  220
          expression_statement shift  219
           selection_statement shift  218
           iteration_statement shift  217
                jump_statement shift  216

State 7:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression ANDAND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OROR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTIONMARK expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          statement ::= * labeled_statement
          statement ::= * compound_statement
          statement ::= * expression_statement
          statement ::= * selection_statement
          statement ::= * iteration_statement
          statement ::= * jump_statement
          labeled_statement ::= * IDENTIFIER COLON statement
          labeled_statement ::= * CASE constant_expression COLON statement
          labeled_statement ::= * DEFAULT COLON statement
          compound_statement ::= * LBRACKET RBRACKET
          compound_statement ::= * LBRACKET statement_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list statement_list RBRACKET
          expression_statement ::= * SEMICOLON
          expression_statement ::= * expression SEMICOLON
          selection_statement ::= * IF LPARENS expression RPARENS statement
          selection_statement ::= * IF LPARENS expression RPARENS statement ELSE statement
          selection_statement ::= * SWITCH LPARENS expression RPARENS statement
          iteration_statement ::= * WHILE LPARENS expression RPARENS statement
          iteration_statement ::= * DO statement WHILE LPARENS expression RPARENS SEMICOLON
          iteration_statement ::= * FOR LPARENS expression_statement expression_statement RPARENS statement
          iteration_statement ::= FOR LPARENS expression_statement expression_statement RPARENS * statement
          iteration_statement ::= * FOR LPARENS expression_statement expression_statement expression RPARENS statement
          jump_statement ::= * GOTO IDENTIFIER SEMICOLON
          jump_statement ::= * CONTINUE SEMICOLON
          jump_statement ::= * BREAK SEMICOLON
          jump_statement ::= * RETURN SEMICOLON
          jump_statement ::= * RETURN expression SEMICOLON

                    IDENTIFIER shift  157
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                      LBRACKET shift  1
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
                     SEMICOLON shift  212
                          CASE shift  35
                       DEFAULT shift  155
                            IF shift  154
                        SWITCH shift  152
                         WHILE shift  151
                            DO shift  9
                           FOR shift  147
                          GOTO shift  146
                      CONTINUE shift  144
                         BREAK shift  143
                        RETURN shift  21
            primary_expression shift  339
                    expression shift  115
            postfix_expression shift  102
         assignment_expression shift  321
              unary_expression shift  98
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  179
        logical_and_expression shift  177
         logical_or_expression shift  129
        conditional_expression shift  322
                     statement shift  201
             labeled_statement shift  221
            compound_statement shift  220
          expression_statement shift  219
           selection_statement shift  218
           iteration_statement shift  217
                jump_statement shift  216

State 8:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression ANDAND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OROR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTIONMARK expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          statement ::= * labeled_statement
          statement ::= * compound_statement
          statement ::= * expression_statement
          statement ::= * selection_statement
          statement ::= * iteration_statement
          statement ::= * jump_statement
          labeled_statement ::= * IDENTIFIER COLON statement
          labeled_statement ::= * CASE constant_expression COLON statement
          labeled_statement ::= * DEFAULT COLON statement
          compound_statement ::= * LBRACKET RBRACKET
          compound_statement ::= * LBRACKET statement_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list statement_list RBRACKET
          expression_statement ::= * SEMICOLON
          expression_statement ::= * expression SEMICOLON
          selection_statement ::= * IF LPARENS expression RPARENS statement
          selection_statement ::= * IF LPARENS expression RPARENS statement ELSE statement
          selection_statement ::= * SWITCH LPARENS expression RPARENS statement
          iteration_statement ::= * WHILE LPARENS expression RPARENS statement
          iteration_statement ::= * DO statement WHILE LPARENS expression RPARENS SEMICOLON
          iteration_statement ::= * FOR LPARENS expression_statement expression_statement RPARENS statement
          iteration_statement ::= * FOR LPARENS expression_statement expression_statement expression RPARENS statement
          iteration_statement ::= FOR LPARENS expression_statement expression_statement expression RPARENS * statement
          jump_statement ::= * GOTO IDENTIFIER SEMICOLON
          jump_statement ::= * CONTINUE SEMICOLON
          jump_statement ::= * BREAK SEMICOLON
          jump_statement ::= * RETURN SEMICOLON
          jump_statement ::= * RETURN expression SEMICOLON

                    IDENTIFIER shift  157
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                      LBRACKET shift  1
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
                     SEMICOLON shift  212
                          CASE shift  35
                       DEFAULT shift  155
                            IF shift  154
                        SWITCH shift  152
                         WHILE shift  151
                            DO shift  9
                           FOR shift  147
                          GOTO shift  146
                      CONTINUE shift  144
                         BREAK shift  143
                        RETURN shift  21
            primary_expression shift  339
                    expression shift  115
            postfix_expression shift  102
         assignment_expression shift  321
              unary_expression shift  98
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  179
        logical_and_expression shift  177
         logical_or_expression shift  129
        conditional_expression shift  322
                     statement shift  207
             labeled_statement shift  221
            compound_statement shift  220
          expression_statement shift  219
           selection_statement shift  218
           iteration_statement shift  217
                jump_statement shift  216

State 9:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression ANDAND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OROR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTIONMARK expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          statement ::= * labeled_statement
          statement ::= * compound_statement
          statement ::= * expression_statement
          statement ::= * selection_statement
          statement ::= * iteration_statement
          statement ::= * jump_statement
          labeled_statement ::= * IDENTIFIER COLON statement
          labeled_statement ::= * CASE constant_expression COLON statement
          labeled_statement ::= * DEFAULT COLON statement
          compound_statement ::= * LBRACKET RBRACKET
          compound_statement ::= * LBRACKET statement_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list statement_list RBRACKET
          expression_statement ::= * SEMICOLON
          expression_statement ::= * expression SEMICOLON
          selection_statement ::= * IF LPARENS expression RPARENS statement
          selection_statement ::= * IF LPARENS expression RPARENS statement ELSE statement
          selection_statement ::= * SWITCH LPARENS expression RPARENS statement
          iteration_statement ::= * WHILE LPARENS expression RPARENS statement
          iteration_statement ::= * DO statement WHILE LPARENS expression RPARENS SEMICOLON
          iteration_statement ::= DO * statement WHILE LPARENS expression RPARENS SEMICOLON
          iteration_statement ::= * FOR LPARENS expression_statement expression_statement RPARENS statement
          iteration_statement ::= * FOR LPARENS expression_statement expression_statement expression RPARENS statement
          jump_statement ::= * GOTO IDENTIFIER SEMICOLON
          jump_statement ::= * CONTINUE SEMICOLON
          jump_statement ::= * BREAK SEMICOLON
          jump_statement ::= * RETURN SEMICOLON
          jump_statement ::= * RETURN expression SEMICOLON

                    IDENTIFIER shift  157
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                      LBRACKET shift  1
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
                     SEMICOLON shift  212
                          CASE shift  35
                       DEFAULT shift  155
                            IF shift  154
                        SWITCH shift  152
                         WHILE shift  151
                            DO shift  9
                           FOR shift  147
                          GOTO shift  146
                      CONTINUE shift  144
                         BREAK shift  143
                        RETURN shift  21
            primary_expression shift  339
                    expression shift  115
            postfix_expression shift  102
         assignment_expression shift  321
              unary_expression shift  98
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  179
        logical_and_expression shift  177
         logical_or_expression shift  129
        conditional_expression shift  322
                     statement shift  150
             labeled_statement shift  221
            compound_statement shift  220
          expression_statement shift  219
           selection_statement shift  218
           iteration_statement shift  217
                jump_statement shift  216

State 10:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression ANDAND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OROR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTIONMARK expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          statement ::= * labeled_statement
          statement ::= * compound_statement
          statement ::= * expression_statement
          statement ::= * selection_statement
          statement ::= * iteration_statement
          statement ::= * jump_statement
          labeled_statement ::= * IDENTIFIER COLON statement
          labeled_statement ::= * CASE constant_expression COLON statement
          labeled_statement ::= * DEFAULT COLON statement
          compound_statement ::= * LBRACKET RBRACKET
          compound_statement ::= * LBRACKET statement_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list statement_list RBRACKET
          expression_statement ::= * SEMICOLON
          expression_statement ::= * expression SEMICOLON
          selection_statement ::= * IF LPARENS expression RPARENS statement
          selection_statement ::= * IF LPARENS expression RPARENS statement ELSE statement
          selection_statement ::= * SWITCH LPARENS expression RPARENS statement
          iteration_statement ::= * WHILE LPARENS expression RPARENS statement
          iteration_statement ::= WHILE LPARENS expression RPARENS * statement
          iteration_statement ::= * DO statement WHILE LPARENS expression RPARENS SEMICOLON
          iteration_statement ::= * FOR LPARENS expression_statement expression_statement RPARENS statement
          iteration_statement ::= * FOR LPARENS expression_statement expression_statement expression RPARENS statement
          jump_statement ::= * GOTO IDENTIFIER SEMICOLON
          jump_statement ::= * CONTINUE SEMICOLON
          jump_statement ::= * BREAK SEMICOLON
          jump_statement ::= * RETURN SEMICOLON
          jump_statement ::= * RETURN expression SEMICOLON

                    IDENTIFIER shift  157
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                      LBRACKET shift  1
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
                     SEMICOLON shift  212
                          CASE shift  35
                       DEFAULT shift  155
                            IF shift  154
                        SWITCH shift  152
                         WHILE shift  151
                            DO shift  9
                           FOR shift  147
                          GOTO shift  146
                      CONTINUE shift  144
                         BREAK shift  143
                        RETURN shift  21
            primary_expression shift  339
                    expression shift  115
            postfix_expression shift  102
         assignment_expression shift  321
              unary_expression shift  98
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  179
        logical_and_expression shift  177
         logical_or_expression shift  129
        conditional_expression shift  322
                     statement shift  209
             labeled_statement shift  221
            compound_statement shift  220
          expression_statement shift  219
           selection_statement shift  218
           iteration_statement shift  217
                jump_statement shift  216

State 11:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression ANDAND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OROR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTIONMARK expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          statement ::= * labeled_statement
          statement ::= * compound_statement
          statement ::= * expression_statement
          statement ::= * selection_statement
          statement ::= * iteration_statement
          statement ::= * jump_statement
          labeled_statement ::= * IDENTIFIER COLON statement
          labeled_statement ::= * CASE constant_expression COLON statement
          labeled_statement ::= * DEFAULT COLON statement
          compound_statement ::= * LBRACKET RBRACKET
          compound_statement ::= * LBRACKET statement_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list statement_list RBRACKET
          expression_statement ::= * SEMICOLON
          expression_statement ::= * expression SEMICOLON
          selection_statement ::= * IF LPARENS expression RPARENS statement
          selection_statement ::= * IF LPARENS expression RPARENS statement ELSE statement
          selection_statement ::= * SWITCH LPARENS expression RPARENS statement
          selection_statement ::= SWITCH LPARENS expression RPARENS * statement
          iteration_statement ::= * WHILE LPARENS expression RPARENS statement
          iteration_statement ::= * DO statement WHILE LPARENS expression RPARENS SEMICOLON
          iteration_statement ::= * FOR LPARENS expression_statement expression_statement RPARENS statement
          iteration_statement ::= * FOR LPARENS expression_statement expression_statement expression RPARENS statement
          jump_statement ::= * GOTO IDENTIFIER SEMICOLON
          jump_statement ::= * CONTINUE SEMICOLON
          jump_statement ::= * BREAK SEMICOLON
          jump_statement ::= * RETURN SEMICOLON
          jump_statement ::= * RETURN expression SEMICOLON

                    IDENTIFIER shift  157
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                      LBRACKET shift  1
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
                     SEMICOLON shift  212
                          CASE shift  35
                       DEFAULT shift  155
                            IF shift  154
                        SWITCH shift  152
                         WHILE shift  151
                            DO shift  9
                           FOR shift  147
                          GOTO shift  146
                      CONTINUE shift  144
                         BREAK shift  143
                        RETURN shift  21
            primary_expression shift  339
                    expression shift  115
            postfix_expression shift  102
         assignment_expression shift  321
              unary_expression shift  98
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  179
        logical_and_expression shift  177
         logical_or_expression shift  129
        conditional_expression shift  322
                     statement shift  210
             labeled_statement shift  221
            compound_statement shift  220
          expression_statement shift  219
           selection_statement shift  218
           iteration_statement shift  217
                jump_statement shift  216

State 12:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression ANDAND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OROR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTIONMARK expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          statement ::= * labeled_statement
          statement ::= * compound_statement
          statement ::= * expression_statement
          statement ::= * selection_statement
          statement ::= * iteration_statement
          statement ::= * jump_statement
          labeled_statement ::= * IDENTIFIER COLON statement
          labeled_statement ::= * CASE constant_expression COLON statement
          labeled_statement ::= * DEFAULT COLON statement
          compound_statement ::= * LBRACKET RBRACKET
          compound_statement ::= * LBRACKET statement_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list statement_list RBRACKET
          expression_statement ::= * SEMICOLON
          expression_statement ::= * expression SEMICOLON
          selection_statement ::= * IF LPARENS expression RPARENS statement
          selection_statement ::= * IF LPARENS expression RPARENS statement ELSE statement
          selection_statement ::= IF LPARENS expression RPARENS statement ELSE * statement
          selection_statement ::= * SWITCH LPARENS expression RPARENS statement
          iteration_statement ::= * WHILE LPARENS expression RPARENS statement
          iteration_statement ::= * DO statement WHILE LPARENS expression RPARENS SEMICOLON
          iteration_statement ::= * FOR LPARENS expression_statement expression_statement RPARENS statement
          iteration_statement ::= * FOR LPARENS expression_statement expression_statement expression RPARENS statement
          jump_statement ::= * GOTO IDENTIFIER SEMICOLON
          jump_statement ::= * CONTINUE SEMICOLON
          jump_statement ::= * BREAK SEMICOLON
          jump_statement ::= * RETURN SEMICOLON
          jump_statement ::= * RETURN expression SEMICOLON

                    IDENTIFIER shift  157
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                      LBRACKET shift  1
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
                     SEMICOLON shift  212
                          CASE shift  35
                       DEFAULT shift  155
                            IF shift  154
                        SWITCH shift  152
                         WHILE shift  151
                            DO shift  9
                           FOR shift  147
                          GOTO shift  146
                      CONTINUE shift  144
                         BREAK shift  143
                        RETURN shift  21
            primary_expression shift  339
                    expression shift  115
            postfix_expression shift  102
         assignment_expression shift  321
              unary_expression shift  98
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  179
        logical_and_expression shift  177
         logical_or_expression shift  129
        conditional_expression shift  322
                     statement shift  211
             labeled_statement shift  221
            compound_statement shift  220
          expression_statement shift  219
           selection_statement shift  218
           iteration_statement shift  217
                jump_statement shift  216

State 13:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression ANDAND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OROR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTIONMARK expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          statement ::= * labeled_statement
          statement ::= * compound_statement
          statement ::= * expression_statement
          statement ::= * selection_statement
          statement ::= * iteration_statement
          statement ::= * jump_statement
          labeled_statement ::= * IDENTIFIER COLON statement
          labeled_statement ::= * CASE constant_expression COLON statement
          labeled_statement ::= * DEFAULT COLON statement
          compound_statement ::= * LBRACKET RBRACKET
          compound_statement ::= * LBRACKET statement_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list statement_list RBRACKET
          expression_statement ::= * SEMICOLON
          expression_statement ::= * expression SEMICOLON
          selection_statement ::= * IF LPARENS expression RPARENS statement
          selection_statement ::= IF LPARENS expression RPARENS * statement
          selection_statement ::= * IF LPARENS expression RPARENS statement ELSE statement
          selection_statement ::= IF LPARENS expression RPARENS * statement ELSE statement
          selection_statement ::= * SWITCH LPARENS expression RPARENS statement
          iteration_statement ::= * WHILE LPARENS expression RPARENS statement
          iteration_statement ::= * DO statement WHILE LPARENS expression RPARENS SEMICOLON
          iteration_statement ::= * FOR LPARENS expression_statement expression_statement RPARENS statement
          iteration_statement ::= * FOR LPARENS expression_statement expression_statement expression RPARENS statement
          jump_statement ::= * GOTO IDENTIFIER SEMICOLON
          jump_statement ::= * CONTINUE SEMICOLON
          jump_statement ::= * BREAK SEMICOLON
          jump_statement ::= * RETURN SEMICOLON
          jump_statement ::= * RETURN expression SEMICOLON

                    IDENTIFIER shift  157
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                      LBRACKET shift  1
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
                     SEMICOLON shift  212
                          CASE shift  35
                       DEFAULT shift  155
                            IF shift  154
                        SWITCH shift  152
                         WHILE shift  151
                            DO shift  9
                           FOR shift  147
                          GOTO shift  146
                      CONTINUE shift  144
                         BREAK shift  143
                        RETURN shift  21
            primary_expression shift  339
                    expression shift  115
            postfix_expression shift  102
         assignment_expression shift  321
              unary_expression shift  98
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  179
        logical_and_expression shift  177
         logical_or_expression shift  129
        conditional_expression shift  322
                     statement shift  153
             labeled_statement shift  221
            compound_statement shift  220
          expression_statement shift  219
           selection_statement shift  218
           iteration_statement shift  217
                jump_statement shift  216

State 14:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression ANDAND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OROR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTIONMARK expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          statement ::= * labeled_statement
          statement ::= * compound_statement
          statement ::= * expression_statement
          statement ::= * selection_statement
          statement ::= * iteration_statement
          statement ::= * jump_statement
          labeled_statement ::= * IDENTIFIER COLON statement
          labeled_statement ::= * CASE constant_expression COLON statement
          labeled_statement ::= * DEFAULT COLON statement
          labeled_statement ::= DEFAULT COLON * statement
          compound_statement ::= * LBRACKET RBRACKET
          compound_statement ::= * LBRACKET statement_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list statement_list RBRACKET
          expression_statement ::= * SEMICOLON
          expression_statement ::= * expression SEMICOLON
          selection_statement ::= * IF LPARENS expression RPARENS statement
          selection_statement ::= * IF LPARENS expression RPARENS statement ELSE statement
          selection_statement ::= * SWITCH LPARENS expression RPARENS statement
          iteration_statement ::= * WHILE LPARENS expression RPARENS statement
          iteration_statement ::= * DO statement WHILE LPARENS expression RPARENS SEMICOLON
          iteration_statement ::= * FOR LPARENS expression_statement expression_statement RPARENS statement
          iteration_statement ::= * FOR LPARENS expression_statement expression_statement expression RPARENS statement
          jump_statement ::= * GOTO IDENTIFIER SEMICOLON
          jump_statement ::= * CONTINUE SEMICOLON
          jump_statement ::= * BREAK SEMICOLON
          jump_statement ::= * RETURN SEMICOLON
          jump_statement ::= * RETURN expression SEMICOLON

                    IDENTIFIER shift  157
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                      LBRACKET shift  1
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
                     SEMICOLON shift  212
                          CASE shift  35
                       DEFAULT shift  155
                            IF shift  154
                        SWITCH shift  152
                         WHILE shift  151
                            DO shift  9
                           FOR shift  147
                          GOTO shift  146
                      CONTINUE shift  144
                         BREAK shift  143
                        RETURN shift  21
            primary_expression shift  339
                    expression shift  115
            postfix_expression shift  102
         assignment_expression shift  321
              unary_expression shift  98
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  179
        logical_and_expression shift  177
         logical_or_expression shift  129
        conditional_expression shift  322
                     statement shift  213
             labeled_statement shift  221
            compound_statement shift  220
          expression_statement shift  219
           selection_statement shift  218
           iteration_statement shift  217
                jump_statement shift  216

State 15:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression ANDAND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OROR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTIONMARK expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          statement ::= * labeled_statement
          statement ::= * compound_statement
          statement ::= * expression_statement
          statement ::= * selection_statement
          statement ::= * iteration_statement
          statement ::= * jump_statement
          labeled_statement ::= * IDENTIFIER COLON statement
          labeled_statement ::= * CASE constant_expression COLON statement
          labeled_statement ::= CASE constant_expression COLON * statement
          labeled_statement ::= * DEFAULT COLON statement
          compound_statement ::= * LBRACKET RBRACKET
          compound_statement ::= * LBRACKET statement_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list statement_list RBRACKET
          expression_statement ::= * SEMICOLON
          expression_statement ::= * expression SEMICOLON
          selection_statement ::= * IF LPARENS expression RPARENS statement
          selection_statement ::= * IF LPARENS expression RPARENS statement ELSE statement
          selection_statement ::= * SWITCH LPARENS expression RPARENS statement
          iteration_statement ::= * WHILE LPARENS expression RPARENS statement
          iteration_statement ::= * DO statement WHILE LPARENS expression RPARENS SEMICOLON
          iteration_statement ::= * FOR LPARENS expression_statement expression_statement RPARENS statement
          iteration_statement ::= * FOR LPARENS expression_statement expression_statement expression RPARENS statement
          jump_statement ::= * GOTO IDENTIFIER SEMICOLON
          jump_statement ::= * CONTINUE SEMICOLON
          jump_statement ::= * BREAK SEMICOLON
          jump_statement ::= * RETURN SEMICOLON
          jump_statement ::= * RETURN expression SEMICOLON

                    IDENTIFIER shift  157
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                      LBRACKET shift  1
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
                     SEMICOLON shift  212
                          CASE shift  35
                       DEFAULT shift  155
                            IF shift  154
                        SWITCH shift  152
                         WHILE shift  151
                            DO shift  9
                           FOR shift  147
                          GOTO shift  146
                      CONTINUE shift  144
                         BREAK shift  143
                        RETURN shift  21
            primary_expression shift  339
                    expression shift  115
            postfix_expression shift  102
         assignment_expression shift  321
              unary_expression shift  98
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  179
        logical_and_expression shift  177
         logical_or_expression shift  129
        conditional_expression shift  322
                     statement shift  214
             labeled_statement shift  221
            compound_statement shift  220
          expression_statement shift  219
           selection_statement shift  218
           iteration_statement shift  217
                jump_statement shift  216

State 16:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression ANDAND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OROR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTIONMARK expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          statement ::= * labeled_statement
          statement ::= * compound_statement
          statement ::= * expression_statement
          statement ::= * selection_statement
          statement ::= * iteration_statement
          statement ::= * jump_statement
          labeled_statement ::= * IDENTIFIER COLON statement
          labeled_statement ::= IDENTIFIER COLON * statement
          labeled_statement ::= * CASE constant_expression COLON statement
          labeled_statement ::= * DEFAULT COLON statement
          compound_statement ::= * LBRACKET RBRACKET
          compound_statement ::= * LBRACKET statement_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list statement_list RBRACKET
          expression_statement ::= * SEMICOLON
          expression_statement ::= * expression SEMICOLON
          selection_statement ::= * IF LPARENS expression RPARENS statement
          selection_statement ::= * IF LPARENS expression RPARENS statement ELSE statement
          selection_statement ::= * SWITCH LPARENS expression RPARENS statement
          iteration_statement ::= * WHILE LPARENS expression RPARENS statement
          iteration_statement ::= * DO statement WHILE LPARENS expression RPARENS SEMICOLON
          iteration_statement ::= * FOR LPARENS expression_statement expression_statement RPARENS statement
          iteration_statement ::= * FOR LPARENS expression_statement expression_statement expression RPARENS statement
          jump_statement ::= * GOTO IDENTIFIER SEMICOLON
          jump_statement ::= * CONTINUE SEMICOLON
          jump_statement ::= * BREAK SEMICOLON
          jump_statement ::= * RETURN SEMICOLON
          jump_statement ::= * RETURN expression SEMICOLON

                    IDENTIFIER shift  157
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                      LBRACKET shift  1
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
                     SEMICOLON shift  212
                          CASE shift  35
                       DEFAULT shift  155
                            IF shift  154
                        SWITCH shift  152
                         WHILE shift  151
                            DO shift  9
                           FOR shift  147
                          GOTO shift  146
                      CONTINUE shift  144
                         BREAK shift  143
                        RETURN shift  21
            primary_expression shift  339
                    expression shift  115
            postfix_expression shift  102
         assignment_expression shift  321
              unary_expression shift  98
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  179
        logical_and_expression shift  177
         logical_or_expression shift  129
        conditional_expression shift  322
                     statement shift  215
             labeled_statement shift  221
            compound_statement shift  220
          expression_statement shift  219
           selection_statement shift  218
           iteration_statement shift  217
                jump_statement shift  216

State 17:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression ANDAND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OROR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTIONMARK expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          expression_statement ::= * SEMICOLON
          expression_statement ::= * expression SEMICOLON
          iteration_statement ::= FOR LPARENS expression_statement * expression_statement RPARENS statement
          iteration_statement ::= FOR LPARENS expression_statement * expression_statement expression RPARENS statement

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
                     SEMICOLON shift  212
            primary_expression shift  339
                    expression shift  115
            postfix_expression shift  102
         assignment_expression shift  321
              unary_expression shift  98
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  179
        logical_and_expression shift  177
         logical_or_expression shift  129
        conditional_expression shift  322
          expression_statement shift  22

State 18:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression ANDAND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OROR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTIONMARK expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          expression_statement ::= * SEMICOLON
          expression_statement ::= * expression SEMICOLON
          iteration_statement ::= FOR LPARENS * expression_statement expression_statement RPARENS statement
          iteration_statement ::= FOR LPARENS * expression_statement expression_statement expression RPARENS statement

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
                     SEMICOLON shift  212
            primary_expression shift  339
                    expression shift  115
            postfix_expression shift  102
         assignment_expression shift  321
              unary_expression shift  98
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  179
        logical_and_expression shift  177
         logical_or_expression shift  129
        conditional_expression shift  322
          expression_statement shift  17

State 19:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression ANDAND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OROR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTIONMARK expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          initializer ::= * assignment_expression
          initializer ::= * LBRACKET initializer_list RBRACKET
          initializer ::= LBRACKET * initializer_list RBRACKET
          initializer ::= * LBRACKET initializer_list COMMA RBRACKET
          initializer ::= LBRACKET * initializer_list COMMA RBRACKET
          initializer_list ::= * initializer
          initializer_list ::= * initializer_list COMMA initializer

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                      LBRACKET shift  19
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
            primary_expression shift  339
            postfix_expression shift  102
         assignment_expression shift  228
              unary_expression shift  98
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  179
        logical_and_expression shift  177
         logical_or_expression shift  129
        conditional_expression shift  322
                   initializer shift  224
              initializer_list shift  116

State 20:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression ANDAND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OROR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTIONMARK expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          initializer ::= * assignment_expression
          initializer ::= * LBRACKET initializer_list RBRACKET
          initializer ::= * LBRACKET initializer_list COMMA RBRACKET
          initializer ::= LBRACKET initializer_list COMMA * RBRACKET
          initializer_list ::= initializer_list COMMA * initializer

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                      LBRACKET shift  19
                      RBRACKET shift  226
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
            primary_expression shift  339
            postfix_expression shift  102
         assignment_expression shift  228
              unary_expression shift  98
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  179
        logical_and_expression shift  177
         logical_or_expression shift  129
        conditional_expression shift  322
                   initializer shift  225

State 21:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression ANDAND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OROR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTIONMARK expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          jump_statement ::= RETURN * SEMICOLON
          jump_statement ::= RETURN * expression SEMICOLON

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
                     SEMICOLON shift  202
            primary_expression shift  339
                    expression shift  109
            postfix_expression shift  102
         assignment_expression shift  321
              unary_expression shift  98
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  179
        logical_and_expression shift  177
         logical_or_expression shift  129
        conditional_expression shift  322

State 22:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression ANDAND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OROR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTIONMARK expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          iteration_statement ::= FOR LPARENS expression_statement expression_statement * RPARENS statement
          iteration_statement ::= FOR LPARENS expression_statement expression_statement * expression RPARENS statement

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                       RPARENS shift  7
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
            primary_expression shift  339
                    expression shift  110
            postfix_expression shift  102
         assignment_expression shift  321
              unary_expression shift  98
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  179
        logical_and_expression shift  177
         logical_or_expression shift  129
        conditional_expression shift  322

State 23:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= postfix_expression LPARENS * RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= postfix_expression LPARENS * argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          argument_expression_list ::= * assignment_expression
          argument_expression_list ::= * argument_expression_list COMMA assignment_expression
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression ANDAND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OROR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTIONMARK expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                       RPARENS shift  239
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
            primary_expression shift  339
            postfix_expression shift  102
      argument_expression_list shift  117
         assignment_expression shift  236
              unary_expression shift  98
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  179
        logical_and_expression shift  177
         logical_or_expression shift  129
        conditional_expression shift  322

State 24:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression ANDAND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OROR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTIONMARK expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          init_declarator ::= declarator EQUALS * initializer
          initializer ::= * assignment_expression
          initializer ::= * LBRACKET initializer_list RBRACKET
          initializer ::= * LBRACKET initializer_list COMMA RBRACKET

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                      LBRACKET shift  19
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
            primary_expression shift  339
            postfix_expression shift  102
         assignment_expression shift  228
              unary_expression shift  98
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  179
        logical_and_expression shift  177
         logical_or_expression shift  129
        conditional_expression shift  322
                   initializer shift  229

State 25:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression ANDAND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OROR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTIONMARK expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          iteration_statement ::= DO statement WHILE LPARENS * expression RPARENS SEMICOLON

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
            primary_expression shift  339
                    expression shift  111
            postfix_expression shift  102
         assignment_expression shift  321
              unary_expression shift  98
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  179
        logical_and_expression shift  177
         logical_or_expression shift  129
        conditional_expression shift  322

State 26:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression ANDAND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OROR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTIONMARK expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          iteration_statement ::= WHILE LPARENS * expression RPARENS statement

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
            primary_expression shift  339
                    expression shift  112
            postfix_expression shift  102
         assignment_expression shift  321
              unary_expression shift  98
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  179
        logical_and_expression shift  177
         logical_or_expression shift  129
        conditional_expression shift  322

State 27:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression ANDAND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OROR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTIONMARK expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          selection_statement ::= SWITCH LPARENS * expression RPARENS statement

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
            primary_expression shift  339
                    expression shift  113
            postfix_expression shift  102
         assignment_expression shift  321
              unary_expression shift  98
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  179
        logical_and_expression shift  177
         logical_or_expression shift  129
        conditional_expression shift  322

State 28:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression ANDAND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OROR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTIONMARK expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression
          selection_statement ::= IF LPARENS * expression RPARENS statement
          selection_statement ::= IF LPARENS * expression RPARENS statement ELSE statement

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
            primary_expression shift  339
                    expression shift  114
            postfix_expression shift  102
         assignment_expression shift  321
              unary_expression shift  98
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  179
        logical_and_expression shift  177
         logical_or_expression shift  129
        conditional_expression shift  322

State 29:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression ANDAND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OROR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTIONMARK expression COLON conditional_expression
          conditional_expression ::= logical_or_expression QUESTIONMARK * expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
            primary_expression shift  339
                    expression shift  128
            postfix_expression shift  102
         assignment_expression shift  321
              unary_expression shift  98
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  179
        logical_and_expression shift  177
         logical_or_expression shift  129
        conditional_expression shift  322

State 30:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          primary_expression ::= LPARENS * expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression ANDAND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OROR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTIONMARK expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
            primary_expression shift  339
                    expression shift  141
            postfix_expression shift  102
         assignment_expression shift  321
              unary_expression shift  98
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  179
        logical_and_expression shift  177
         logical_or_expression shift  129
        conditional_expression shift  322

State 31:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= postfix_expression LBRACKET * expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression ANDAND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OROR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTIONMARK expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= * assignment_expression
          expression ::= * expression COMMA assignment_expression

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
            primary_expression shift  339
                    expression shift  140
            postfix_expression shift  102
         assignment_expression shift  321
              unary_expression shift  98
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  179
        logical_and_expression shift  177
         logical_or_expression shift  129
        conditional_expression shift  322

State 32:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression ANDAND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OROR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTIONMARK expression COLON conditional_expression
          constant_expression ::= * conditional_expression
          direct_abstract_declarator ::= LBRACE * RBRACE
          direct_abstract_declarator ::= LBRACE * constant_expression RBRACE

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
                        RBRACE shift  254
            primary_expression shift  339
            postfix_expression shift  102
              unary_expression shift  327
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  179
        logical_and_expression shift  177
         logical_or_expression shift  129
        conditional_expression shift  290
           constant_expression shift  162

State 33:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression ANDAND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OROR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTIONMARK expression COLON conditional_expression
          constant_expression ::= * conditional_expression
          direct_abstract_declarator ::= direct_abstract_declarator LBRACE * RBRACE
          direct_abstract_declarator ::= direct_abstract_declarator LBRACE * constant_expression RBRACE

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
                        RBRACE shift  259
            primary_expression shift  339
            postfix_expression shift  102
              unary_expression shift  327
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  179
        logical_and_expression shift  177
         logical_or_expression shift  129
        conditional_expression shift  290
           constant_expression shift  165

State 34:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression ANDAND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OROR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTIONMARK expression COLON conditional_expression
          constant_expression ::= * conditional_expression
          direct_declarator ::= direct_declarator LBRACKET * constant_expression RBRACE
          direct_declarator ::= direct_declarator LBRACKET * RBRACE

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
                        RBRACE shift  286
            primary_expression shift  339
            postfix_expression shift  102
              unary_expression shift  327
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  179
        logical_and_expression shift  177
         logical_or_expression shift  129
        conditional_expression shift  290
           constant_expression shift  172

State 35:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression ANDAND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OROR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTIONMARK expression COLON conditional_expression
          constant_expression ::= * conditional_expression
          labeled_statement ::= CASE * constant_expression COLON statement

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
            primary_expression shift  339
            postfix_expression shift  102
              unary_expression shift  327
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  179
        logical_and_expression shift  177
         logical_or_expression shift  129
        conditional_expression shift  290
           constant_expression shift  156

State 36:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          argument_expression_list ::= argument_expression_list COMMA * assignment_expression
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression ANDAND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OROR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTIONMARK expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
            primary_expression shift  339
            postfix_expression shift  102
         assignment_expression shift  237
              unary_expression shift  98
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  179
        logical_and_expression shift  177
         logical_or_expression shift  129
        conditional_expression shift  322

State 37:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression ANDAND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OROR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTIONMARK expression COLON conditional_expression
          constant_expression ::= * conditional_expression
          enumerator ::= IDENTIFIER EQUALS * constant_expression

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
            primary_expression shift  339
            postfix_expression shift  102
              unary_expression shift  327
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  179
        logical_and_expression shift  177
         logical_or_expression shift  129
        conditional_expression shift  290
           constant_expression shift  277

State 38:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression ANDAND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OROR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTIONMARK expression COLON conditional_expression
          constant_expression ::= * conditional_expression
          struct_declarator ::= COLON * constant_expression

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
            primary_expression shift  339
            postfix_expression shift  102
              unary_expression shift  327
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  179
        logical_and_expression shift  177
         logical_or_expression shift  129
        conditional_expression shift  290
           constant_expression shift  288

State 39:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression ANDAND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OROR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTIONMARK expression COLON conditional_expression
          constant_expression ::= * conditional_expression
          struct_declarator ::= declarator COLON * constant_expression

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
            primary_expression shift  339
            postfix_expression shift  102
              unary_expression shift  327
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  179
        logical_and_expression shift  177
         logical_or_expression shift  129
        conditional_expression shift  290
           constant_expression shift  289

State 40:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression ANDAND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OROR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTIONMARK expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          assignment_expression ::= unary_expression assignment_operator * assignment_expression

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
            primary_expression shift  339
            postfix_expression shift  102
         assignment_expression shift  320
              unary_expression shift  98
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  179
        logical_and_expression shift  177
         logical_or_expression shift  129
        conditional_expression shift  322

State 41:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression ANDAND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OROR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTIONMARK expression COLON conditional_expression
          assignment_expression ::= * conditional_expression
          assignment_expression ::= * unary_expression assignment_operator assignment_expression
          expression ::= expression COMMA * assignment_expression

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
            primary_expression shift  339
            postfix_expression shift  102
         assignment_expression shift  231
              unary_expression shift  98
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  179
        logical_and_expression shift  177
         logical_or_expression shift  129
        conditional_expression shift  322

State 42:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression ANDAND_OP inclusive_or_expression
          logical_or_expression ::= * logical_and_expression
          logical_or_expression ::= * logical_or_expression OROR_OP logical_and_expression
          conditional_expression ::= * logical_or_expression
          conditional_expression ::= * logical_or_expression QUESTIONMARK expression COLON conditional_expression
          conditional_expression ::= logical_or_expression QUESTIONMARK expression COLON * conditional_expression

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
            primary_expression shift  339
            postfix_expression shift  102
              unary_expression shift  327
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  179
        logical_and_expression shift  177
         logical_or_expression shift  129
        conditional_expression shift  323

State 43:
          declaration_specifiers ::= * storage_class_specifier
          declaration_specifiers ::= * storage_class_specifier declaration_specifiers
          declaration_specifiers ::= * type_specifier
          declaration_specifiers ::= * type_specifier declaration_specifiers
          declaration_specifiers ::= * type_qualifier
          declaration_specifiers ::= * type_qualifier declaration_specifiers
          storage_class_specifier ::= * TYPEDEF
          storage_class_specifier ::= * EXTERN
          storage_class_specifier ::= * STATIC
          type_specifier ::= * VOID
          type_specifier ::= * CHAR
          type_specifier ::= * SHORT
          type_specifier ::= * INT
          type_specifier ::= * LONG
          type_specifier ::= * FLOAT
          type_specifier ::= * DOUBLE
          type_specifier ::= * SIGNED
          type_specifier ::= * UNSIGNED
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          type_specifier ::= * TYPE_NAME
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT
          struct_or_union ::= * UNION
          enum_specifier ::= * ENUM LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST
          type_qualifier ::= * VOLATILE
          declarator ::= * pointer direct_declarator
          declarator ::= * direct_declarator
          direct_declarator ::= * IDENTIFIER
          direct_declarator ::= * LPARENS declarator RPARENS
          direct_declarator ::= LPARENS * declarator RPARENS
          direct_declarator ::= * direct_declarator LBRACKET constant_expression RBRACE
          direct_declarator ::= * direct_declarator LBRACKET RBRACE
          direct_declarator ::= * direct_declarator LPARENS parameter_type_list RPARENS
          direct_declarator ::= * direct_declarator LPARENS identifier_list RPARENS
          direct_declarator ::= * direct_declarator LPARENS RPARENS
          pointer ::= * MULT
          pointer ::= * MULT type_qualifier_list
          pointer ::= * MULT pointer
          pointer ::= * MULT type_qualifier_list pointer
          parameter_type_list ::= * parameter_list
          parameter_type_list ::= * parameter_list COMMA ELLIPSIS
          parameter_list ::= * parameter_declaration
          parameter_list ::= * parameter_list COMMA parameter_declaration
          parameter_declaration ::= * declaration_specifiers declarator
          parameter_declaration ::= * declaration_specifiers abstract_declarator
          parameter_declaration ::= * declaration_specifiers
          abstract_declarator ::= * pointer
          abstract_declarator ::= * direct_abstract_declarator
          abstract_declarator ::= * pointer direct_abstract_declarator
          direct_abstract_declarator ::= * LPARENS abstract_declarator RPARENS
          direct_abstract_declarator ::= LPARENS * abstract_declarator RPARENS
          direct_abstract_declarator ::= * LBRACE RBRACE
          direct_abstract_declarator ::= * LBRACE constant_expression RBRACE
          direct_abstract_declarator ::= * direct_abstract_declarator LBRACE RBRACE
          direct_abstract_declarator ::= * direct_abstract_declarator LBRACE constant_expression RBRACE
          direct_abstract_declarator ::= * LPARENS RPARENS
          direct_abstract_declarator ::= LPARENS * RPARENS
          direct_abstract_declarator ::= * LPARENS parameter_type_list RPARENS
          direct_abstract_declarator ::= LPARENS * parameter_type_list RPARENS
          direct_abstract_declarator ::= * direct_abstract_declarator LPARENS RPARENS
          direct_abstract_declarator ::= * direct_abstract_declarator LPARENS parameter_type_list RPARENS

                    IDENTIFIER shift  266
                       LPARENS shift  43
                       RPARENS shift  252
                          MULT shift  93
                       TYPEDEF shift  282
                        EXTERN shift  281
                        STATIC shift  280
                          VOID shift  308
                          CHAR shift  307
                         SHORT shift  306
                           INT shift  305
                          LONG shift  304
                         FLOAT shift  303
                        DOUBLE shift  302
                        SIGNED shift  301
                      UNSIGNED shift  300
                     TYPE_NAME shift  297
                        LBRACE shift  32
                        STRUCT shift  295
                         UNION shift  294
                          ENUM shift  124
                         CONST shift  274
                      VOLATILE shift  273
        declaration_specifiers shift  83
       storage_class_specifier shift  68
                type_specifier shift  67
                type_qualifier shift  66
                    declarator shift  166
     struct_or_union_specifier shift  299
                enum_specifier shift  298
               struct_or_union shift  127
                       pointer shift  95
             direct_declarator shift  120
           parameter_type_list shift  161
                parameter_list shift  167
         parameter_declaration shift  260
           abstract_declarator shift  163
    direct_abstract_declarator shift  119

State 44:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= * inclusive_or_expression
          logical_and_expression ::= * logical_and_expression ANDAND_OP inclusive_or_expression
          logical_or_expression ::= logical_or_expression OROR_OP * logical_and_expression

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
            primary_expression shift  339
            postfix_expression shift  102
              unary_expression shift  327
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  179
        logical_and_expression shift  175

State 45:
          declaration ::= * declaration_specifiers SEMICOLON
          declaration ::= * declaration_specifiers init_declarator_list SEMICOLON
          declaration_specifiers ::= * storage_class_specifier
          declaration_specifiers ::= * storage_class_specifier declaration_specifiers
          declaration_specifiers ::= * type_specifier
          declaration_specifiers ::= * type_specifier declaration_specifiers
          declaration_specifiers ::= * type_qualifier
          declaration_specifiers ::= * type_qualifier declaration_specifiers
          storage_class_specifier ::= * TYPEDEF
          storage_class_specifier ::= * EXTERN
          storage_class_specifier ::= * STATIC
          type_specifier ::= * VOID
          type_specifier ::= * CHAR
          type_specifier ::= * SHORT
          type_specifier ::= * INT
          type_specifier ::= * LONG
          type_specifier ::= * FLOAT
          type_specifier ::= * DOUBLE
          type_specifier ::= * SIGNED
          type_specifier ::= * UNSIGNED
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          type_specifier ::= * TYPE_NAME
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT
          struct_or_union ::= * UNION
          enum_specifier ::= * ENUM LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST
          type_qualifier ::= * VOLATILE
          declarator ::= * pointer direct_declarator
          declarator ::= * direct_declarator
          direct_declarator ::= * IDENTIFIER
          direct_declarator ::= * LPARENS declarator RPARENS
          direct_declarator ::= * direct_declarator LBRACKET constant_expression RBRACE
          direct_declarator ::= * direct_declarator LBRACKET RBRACE
          direct_declarator ::= * direct_declarator LPARENS parameter_type_list RPARENS
          direct_declarator ::= * direct_declarator LPARENS identifier_list RPARENS
          direct_declarator ::= * direct_declarator LPARENS RPARENS
          pointer ::= * MULT
          pointer ::= * MULT type_qualifier_list
          pointer ::= * MULT pointer
          pointer ::= * MULT type_qualifier_list pointer
    (201) brightc_file ::= translation_unit *
          translation_unit ::= translation_unit * external_declaration
          external_declaration ::= * function_definition
          external_declaration ::= * declaration
          function_definition ::= * declaration_specifiers declarator declaration_list compound_statement
          function_definition ::= * declaration_specifiers declarator compound_statement
          function_definition ::= * declarator declaration_list compound_statement
          function_definition ::= * declarator compound_statement

                             $ reduce 201
                    IDENTIFIER shift  266
                       LPARENS shift  92
                          MULT shift  93
                       TYPEDEF shift  282
                        EXTERN shift  281
                        STATIC shift  280
                          VOID shift  308
                          CHAR shift  307
                         SHORT shift  306
                           INT shift  305
                          LONG shift  304
                         FLOAT shift  303
                        DOUBLE shift  302
                        SIGNED shift  301
                      UNSIGNED shift  300
                     TYPE_NAME shift  297
                        STRUCT shift  295
                         UNION shift  294
                          ENUM shift  124
                         CONST shift  274
                      VOLATILE shift  273
                   declaration shift  188
        declaration_specifiers shift  85
       storage_class_specifier shift  68
                type_specifier shift  67
                type_qualifier shift  66
                    declarator shift  52
     struct_or_union_specifier shift  299
                enum_specifier shift  298
               struct_or_union shift  127
                       pointer shift  100
             direct_declarator shift  120
          external_declaration shift  190
           function_definition shift  189

State 46:
          declaration_specifiers ::= * storage_class_specifier
          declaration_specifiers ::= * storage_class_specifier declaration_specifiers
          declaration_specifiers ::= * type_specifier
          declaration_specifiers ::= * type_specifier declaration_specifiers
          declaration_specifiers ::= * type_qualifier
          declaration_specifiers ::= * type_qualifier declaration_specifiers
          storage_class_specifier ::= * TYPEDEF
          storage_class_specifier ::= * EXTERN
          storage_class_specifier ::= * STATIC
          type_specifier ::= * VOID
          type_specifier ::= * CHAR
          type_specifier ::= * SHORT
          type_specifier ::= * INT
          type_specifier ::= * LONG
          type_specifier ::= * FLOAT
          type_specifier ::= * DOUBLE
          type_specifier ::= * SIGNED
          type_specifier ::= * UNSIGNED
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          type_specifier ::= * TYPE_NAME
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT
          struct_or_union ::= * UNION
          enum_specifier ::= * ENUM LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST
          type_qualifier ::= * VOLATILE
          pointer ::= * MULT
          pointer ::= * MULT type_qualifier_list
          pointer ::= * MULT pointer
          pointer ::= * MULT type_qualifier_list pointer
          parameter_type_list ::= * parameter_list
          parameter_type_list ::= * parameter_list COMMA ELLIPSIS
          parameter_list ::= * parameter_declaration
          parameter_list ::= * parameter_list COMMA parameter_declaration
          parameter_declaration ::= * declaration_specifiers declarator
          parameter_declaration ::= * declaration_specifiers abstract_declarator
          parameter_declaration ::= * declaration_specifiers
          abstract_declarator ::= * pointer
          abstract_declarator ::= * direct_abstract_declarator
          abstract_declarator ::= * pointer direct_abstract_declarator
          direct_abstract_declarator ::= * LPARENS abstract_declarator RPARENS
          direct_abstract_declarator ::= LPARENS * abstract_declarator RPARENS
          direct_abstract_declarator ::= * LBRACE RBRACE
          direct_abstract_declarator ::= * LBRACE constant_expression RBRACE
          direct_abstract_declarator ::= * direct_abstract_declarator LBRACE RBRACE
          direct_abstract_declarator ::= * direct_abstract_declarator LBRACE constant_expression RBRACE
          direct_abstract_declarator ::= * LPARENS RPARENS
          direct_abstract_declarator ::= LPARENS * RPARENS
          direct_abstract_declarator ::= * LPARENS parameter_type_list RPARENS
          direct_abstract_declarator ::= LPARENS * parameter_type_list RPARENS
          direct_abstract_declarator ::= * direct_abstract_declarator LPARENS RPARENS
          direct_abstract_declarator ::= * direct_abstract_declarator LPARENS parameter_type_list RPARENS

                       LPARENS shift  46
                       RPARENS shift  252
                          MULT shift  93
                       TYPEDEF shift  282
                        EXTERN shift  281
                        STATIC shift  280
                          VOID shift  308
                          CHAR shift  307
                         SHORT shift  306
                           INT shift  305
                          LONG shift  304
                         FLOAT shift  303
                        DOUBLE shift  302
                        SIGNED shift  301
                      UNSIGNED shift  300
                     TYPE_NAME shift  297
                        LBRACE shift  32
                        STRUCT shift  295
                         UNION shift  294
                          ENUM shift  124
                         CONST shift  274
                      VOLATILE shift  273
        declaration_specifiers shift  83
       storage_class_specifier shift  68
                type_specifier shift  67
                type_qualifier shift  66
     struct_or_union_specifier shift  299
                enum_specifier shift  298
               struct_or_union shift  127
                       pointer shift  99
           parameter_type_list shift  161
                parameter_list shift  167
         parameter_declaration shift  260
           abstract_declarator shift  163
    direct_abstract_declarator shift  119

State 47:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= * exclusive_or_expression
          inclusive_or_expression ::= * inclusive_or_expression OR exclusive_or_expression
          logical_and_expression ::= logical_and_expression ANDAND_OP * inclusive_or_expression

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
            primary_expression shift  339
            postfix_expression shift  102
              unary_expression shift  327
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  181
       inclusive_or_expression shift  176

State 48:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= * and_expression
          exclusive_or_expression ::= * exclusive_or_expression XOR and_expression
          inclusive_or_expression ::= inclusive_or_expression OR * exclusive_or_expression

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
            primary_expression shift  339
            postfix_expression shift  102
              unary_expression shift  327
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  182
       exclusive_or_expression shift  178

State 49:
          declaration_specifiers ::= * storage_class_specifier
          declaration_specifiers ::= * storage_class_specifier declaration_specifiers
          declaration_specifiers ::= * type_specifier
          declaration_specifiers ::= * type_specifier declaration_specifiers
          declaration_specifiers ::= * type_qualifier
          declaration_specifiers ::= * type_qualifier declaration_specifiers
          storage_class_specifier ::= * TYPEDEF
          storage_class_specifier ::= * EXTERN
          storage_class_specifier ::= * STATIC
          type_specifier ::= * VOID
          type_specifier ::= * CHAR
          type_specifier ::= * SHORT
          type_specifier ::= * INT
          type_specifier ::= * LONG
          type_specifier ::= * FLOAT
          type_specifier ::= * DOUBLE
          type_specifier ::= * SIGNED
          type_specifier ::= * UNSIGNED
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          type_specifier ::= * TYPE_NAME
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT
          struct_or_union ::= * UNION
          enum_specifier ::= * ENUM LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST
          type_qualifier ::= * VOLATILE
          direct_declarator ::= direct_declarator LPARENS * parameter_type_list RPARENS
          direct_declarator ::= direct_declarator LPARENS * identifier_list RPARENS
          direct_declarator ::= direct_declarator LPARENS * RPARENS
          parameter_type_list ::= * parameter_list
          parameter_type_list ::= * parameter_list COMMA ELLIPSIS
          parameter_list ::= * parameter_declaration
          parameter_list ::= * parameter_list COMMA parameter_declaration
          parameter_declaration ::= * declaration_specifiers declarator
          parameter_declaration ::= * declaration_specifiers abstract_declarator
          parameter_declaration ::= * declaration_specifiers
          identifier_list ::= * IDENTIFIER
          identifier_list ::= * identifier_list COMMA IDENTIFIER

                    IDENTIFIER shift  248
                       RPARENS shift  269
                       TYPEDEF shift  282
                        EXTERN shift  281
                        STATIC shift  280
                          VOID shift  308
                          CHAR shift  307
                         SHORT shift  306
                           INT shift  305
                          LONG shift  304
                         FLOAT shift  303
                        DOUBLE shift  302
                        SIGNED shift  301
                      UNSIGNED shift  300
                     TYPE_NAME shift  297
                        STRUCT shift  295
                         UNION shift  294
                          ENUM shift  124
                         CONST shift  274
                      VOLATILE shift  273
        declaration_specifiers shift  83
       storage_class_specifier shift  68
                type_specifier shift  67
                type_qualifier shift  66
     struct_or_union_specifier shift  299
                enum_specifier shift  298
               struct_or_union shift  127
           parameter_type_list shift  169
               identifier_list shift  121
                parameter_list shift  167
         parameter_declaration shift  260

State 50:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= * equality_expression
          and_expression ::= * and_expression AND equality_expression
          exclusive_or_expression ::= exclusive_or_expression XOR * and_expression

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
            primary_expression shift  339
            postfix_expression shift  102
              unary_expression shift  327
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  131
                and_expression shift  180

State 51:
          declaration ::= * declaration_specifiers SEMICOLON
          declaration ::= * declaration_specifiers init_declarator_list SEMICOLON
          declaration_specifiers ::= * storage_class_specifier
          declaration_specifiers ::= * storage_class_specifier declaration_specifiers
          declaration_specifiers ::= * type_specifier
          declaration_specifiers ::= * type_specifier declaration_specifiers
          declaration_specifiers ::= * type_qualifier
          declaration_specifiers ::= * type_qualifier declaration_specifiers
     (84) init_declarator ::= declarator *
          init_declarator ::= declarator * EQUALS initializer
          storage_class_specifier ::= * TYPEDEF
          storage_class_specifier ::= * EXTERN
          storage_class_specifier ::= * STATIC
          type_specifier ::= * VOID
          type_specifier ::= * CHAR
          type_specifier ::= * SHORT
          type_specifier ::= * INT
          type_specifier ::= * LONG
          type_specifier ::= * FLOAT
          type_specifier ::= * DOUBLE
          type_specifier ::= * SIGNED
          type_specifier ::= * UNSIGNED
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          type_specifier ::= * TYPE_NAME
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT
          struct_or_union ::= * UNION
          enum_specifier ::= * ENUM LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST
          type_qualifier ::= * VOLATILE
          compound_statement ::= * LBRACKET RBRACKET
          compound_statement ::= * LBRACKET statement_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list statement_list RBRACKET
          declaration_list ::= * declaration
          declaration_list ::= * declaration_list declaration
          function_definition ::= declaration_specifiers declarator * declaration_list compound_statement
          function_definition ::= declaration_specifiers declarator * compound_statement

                      LBRACKET shift  1
                        EQUALS shift  24
                       TYPEDEF shift  282
                        EXTERN shift  281
                        STATIC shift  280
                          VOID shift  308
                          CHAR shift  307
                         SHORT shift  306
                           INT shift  305
                          LONG shift  304
                         FLOAT shift  303
                        DOUBLE shift  302
                        SIGNED shift  301
                      UNSIGNED shift  300
                     TYPE_NAME shift  297
                        STRUCT shift  295
                         UNION shift  294
                          ENUM shift  124
                         CONST shift  274
                      VOLATILE shift  273
                   declaration shift  193
        declaration_specifiers shift  82
       storage_class_specifier shift  68
                type_specifier shift  67
                type_qualifier shift  66
     struct_or_union_specifier shift  299
                enum_specifier shift  298
               struct_or_union shift  127
            compound_statement shift  191
              declaration_list shift  56
                     {default} reduce 84

State 52:
          declaration ::= * declaration_specifiers SEMICOLON
          declaration ::= * declaration_specifiers init_declarator_list SEMICOLON
          declaration_specifiers ::= * storage_class_specifier
          declaration_specifiers ::= * storage_class_specifier declaration_specifiers
          declaration_specifiers ::= * type_specifier
          declaration_specifiers ::= * type_specifier declaration_specifiers
          declaration_specifiers ::= * type_qualifier
          declaration_specifiers ::= * type_qualifier declaration_specifiers
          storage_class_specifier ::= * TYPEDEF
          storage_class_specifier ::= * EXTERN
          storage_class_specifier ::= * STATIC
          type_specifier ::= * VOID
          type_specifier ::= * CHAR
          type_specifier ::= * SHORT
          type_specifier ::= * INT
          type_specifier ::= * LONG
          type_specifier ::= * FLOAT
          type_specifier ::= * DOUBLE
          type_specifier ::= * SIGNED
          type_specifier ::= * UNSIGNED
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          type_specifier ::= * TYPE_NAME
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT
          struct_or_union ::= * UNION
          enum_specifier ::= * ENUM LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST
          type_qualifier ::= * VOLATILE
          compound_statement ::= * LBRACKET RBRACKET
          compound_statement ::= * LBRACKET statement_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list statement_list RBRACKET
          declaration_list ::= * declaration
          declaration_list ::= * declaration_list declaration
          function_definition ::= declarator * declaration_list compound_statement
          function_definition ::= declarator * compound_statement

                      LBRACKET shift  1
                       TYPEDEF shift  282
                        EXTERN shift  281
                        STATIC shift  280
                          VOID shift  308
                          CHAR shift  307
                         SHORT shift  306
                           INT shift  305
                          LONG shift  304
                         FLOAT shift  303
                        DOUBLE shift  302
                        SIGNED shift  301
                      UNSIGNED shift  300
                     TYPE_NAME shift  297
                        STRUCT shift  295
                         UNION shift  294
                          ENUM shift  124
                         CONST shift  274
                      VOLATILE shift  273
                   declaration shift  193
        declaration_specifiers shift  82
       storage_class_specifier shift  68
                type_specifier shift  67
                type_qualifier shift  66
     struct_or_union_specifier shift  299
                enum_specifier shift  298
               struct_or_union shift  127
            compound_statement shift  186
              declaration_list shift  55

State 53:
          declaration_specifiers ::= * storage_class_specifier
          declaration_specifiers ::= * storage_class_specifier declaration_specifiers
          declaration_specifiers ::= * type_specifier
          declaration_specifiers ::= * type_specifier declaration_specifiers
          declaration_specifiers ::= * type_qualifier
          declaration_specifiers ::= * type_qualifier declaration_specifiers
          storage_class_specifier ::= * TYPEDEF
          storage_class_specifier ::= * EXTERN
          storage_class_specifier ::= * STATIC
          type_specifier ::= * VOID
          type_specifier ::= * CHAR
          type_specifier ::= * SHORT
          type_specifier ::= * INT
          type_specifier ::= * LONG
          type_specifier ::= * FLOAT
          type_specifier ::= * DOUBLE
          type_specifier ::= * SIGNED
          type_specifier ::= * UNSIGNED
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          type_specifier ::= * TYPE_NAME
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT
          struct_or_union ::= * UNION
          enum_specifier ::= * ENUM LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST
          type_qualifier ::= * VOLATILE
          parameter_type_list ::= * parameter_list
          parameter_type_list ::= * parameter_list COMMA ELLIPSIS
          parameter_list ::= * parameter_declaration
          parameter_list ::= * parameter_list COMMA parameter_declaration
          parameter_declaration ::= * declaration_specifiers declarator
          parameter_declaration ::= * declaration_specifiers abstract_declarator
          parameter_declaration ::= * declaration_specifiers
          direct_abstract_declarator ::= direct_abstract_declarator LPARENS * RPARENS
          direct_abstract_declarator ::= direct_abstract_declarator LPARENS * parameter_type_list RPARENS

                       RPARENS shift  257
                       TYPEDEF shift  282
                        EXTERN shift  281
                        STATIC shift  280
                          VOID shift  308
                          CHAR shift  307
                         SHORT shift  306
                           INT shift  305
                          LONG shift  304
                         FLOAT shift  303
                        DOUBLE shift  302
                        SIGNED shift  301
                      UNSIGNED shift  300
                     TYPE_NAME shift  297
                        STRUCT shift  295
                         UNION shift  294
                          ENUM shift  124
                         CONST shift  274
                      VOLATILE shift  273
        declaration_specifiers shift  83
       storage_class_specifier shift  68
                type_specifier shift  67
                type_qualifier shift  66
     struct_or_union_specifier shift  299
                enum_specifier shift  298
               struct_or_union shift  127
           parameter_type_list shift  164
                parameter_list shift  167
         parameter_declaration shift  260

State 54:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= * relational_expression
          equality_expression ::= * equality_expression EQ_OP relational_expression
          equality_expression ::= * equality_expression NE_OP relational_expression
          and_expression ::= and_expression AND * equality_expression

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
            primary_expression shift  339
            postfix_expression shift  102
              unary_expression shift  327
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  105
           equality_expression shift  130

State 55:
          declaration ::= * declaration_specifiers SEMICOLON
          declaration ::= * declaration_specifiers init_declarator_list SEMICOLON
          declaration_specifiers ::= * storage_class_specifier
          declaration_specifiers ::= * storage_class_specifier declaration_specifiers
          declaration_specifiers ::= * type_specifier
          declaration_specifiers ::= * type_specifier declaration_specifiers
          declaration_specifiers ::= * type_qualifier
          declaration_specifiers ::= * type_qualifier declaration_specifiers
          storage_class_specifier ::= * TYPEDEF
          storage_class_specifier ::= * EXTERN
          storage_class_specifier ::= * STATIC
          type_specifier ::= * VOID
          type_specifier ::= * CHAR
          type_specifier ::= * SHORT
          type_specifier ::= * INT
          type_specifier ::= * LONG
          type_specifier ::= * FLOAT
          type_specifier ::= * DOUBLE
          type_specifier ::= * SIGNED
          type_specifier ::= * UNSIGNED
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          type_specifier ::= * TYPE_NAME
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT
          struct_or_union ::= * UNION
          enum_specifier ::= * ENUM LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST
          type_qualifier ::= * VOLATILE
          compound_statement ::= * LBRACKET RBRACKET
          compound_statement ::= * LBRACKET statement_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list statement_list RBRACKET
          declaration_list ::= declaration_list * declaration
          function_definition ::= declarator declaration_list * compound_statement

                      LBRACKET shift  1
                       TYPEDEF shift  282
                        EXTERN shift  281
                        STATIC shift  280
                          VOID shift  308
                          CHAR shift  307
                         SHORT shift  306
                           INT shift  305
                          LONG shift  304
                         FLOAT shift  303
                        DOUBLE shift  302
                        SIGNED shift  301
                      UNSIGNED shift  300
                     TYPE_NAME shift  297
                        STRUCT shift  295
                         UNION shift  294
                          ENUM shift  124
                         CONST shift  274
                      VOLATILE shift  273
                   declaration shift  195
        declaration_specifiers shift  82
       storage_class_specifier shift  68
                type_specifier shift  67
                type_qualifier shift  66
     struct_or_union_specifier shift  299
                enum_specifier shift  298
               struct_or_union shift  127
            compound_statement shift  187

State 56:
          declaration ::= * declaration_specifiers SEMICOLON
          declaration ::= * declaration_specifiers init_declarator_list SEMICOLON
          declaration_specifiers ::= * storage_class_specifier
          declaration_specifiers ::= * storage_class_specifier declaration_specifiers
          declaration_specifiers ::= * type_specifier
          declaration_specifiers ::= * type_specifier declaration_specifiers
          declaration_specifiers ::= * type_qualifier
          declaration_specifiers ::= * type_qualifier declaration_specifiers
          storage_class_specifier ::= * TYPEDEF
          storage_class_specifier ::= * EXTERN
          storage_class_specifier ::= * STATIC
          type_specifier ::= * VOID
          type_specifier ::= * CHAR
          type_specifier ::= * SHORT
          type_specifier ::= * INT
          type_specifier ::= * LONG
          type_specifier ::= * FLOAT
          type_specifier ::= * DOUBLE
          type_specifier ::= * SIGNED
          type_specifier ::= * UNSIGNED
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          type_specifier ::= * TYPE_NAME
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT
          struct_or_union ::= * UNION
          enum_specifier ::= * ENUM LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST
          type_qualifier ::= * VOLATILE
          compound_statement ::= * LBRACKET RBRACKET
          compound_statement ::= * LBRACKET statement_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list RBRACKET
          compound_statement ::= * LBRACKET declaration_list statement_list RBRACKET
          declaration_list ::= declaration_list * declaration
          function_definition ::= declaration_specifiers declarator declaration_list * compound_statement

                      LBRACKET shift  1
                       TYPEDEF shift  282
                        EXTERN shift  281
                        STATIC shift  280
                          VOID shift  308
                          CHAR shift  307
                         SHORT shift  306
                           INT shift  305
                          LONG shift  304
                         FLOAT shift  303
                        DOUBLE shift  302
                        SIGNED shift  301
                      UNSIGNED shift  300
                     TYPE_NAME shift  297
                        STRUCT shift  295
                         UNION shift  294
                          ENUM shift  124
                         CONST shift  274
                      VOLATILE shift  273
                   declaration shift  195
        declaration_specifiers shift  82
       storage_class_specifier shift  68
                type_specifier shift  67
                type_qualifier shift  66
     struct_or_union_specifier shift  299
                enum_specifier shift  298
               struct_or_union shift  127
            compound_statement shift  192

State 57:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= equality_expression NE_OP * relational_expression

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
            primary_expression shift  339
            postfix_expression shift  102
              unary_expression shift  327
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  103

State 58:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= * shift_expression
          relational_expression ::= * relational_expression LESS shift_expression
          relational_expression ::= * relational_expression MORE shift_expression
          relational_expression ::= * relational_expression LE_OP shift_expression
          relational_expression ::= * relational_expression GE_OP shift_expression
          equality_expression ::= equality_expression EQ_OP * relational_expression

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
            primary_expression shift  339
            postfix_expression shift  102
              unary_expression shift  327
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  138
         relational_expression shift  104

State 59:
          declaration_specifiers ::= * storage_class_specifier
          declaration_specifiers ::= * storage_class_specifier declaration_specifiers
          declaration_specifiers ::= * type_specifier
          declaration_specifiers ::= * type_specifier declaration_specifiers
          declaration_specifiers ::= * type_qualifier
          declaration_specifiers ::= * type_qualifier declaration_specifiers
          storage_class_specifier ::= * TYPEDEF
          storage_class_specifier ::= * EXTERN
          storage_class_specifier ::= * STATIC
          type_specifier ::= * VOID
          type_specifier ::= * CHAR
          type_specifier ::= * SHORT
          type_specifier ::= * INT
          type_specifier ::= * LONG
          type_specifier ::= * FLOAT
          type_specifier ::= * DOUBLE
          type_specifier ::= * SIGNED
          type_specifier ::= * UNSIGNED
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          type_specifier ::= * TYPE_NAME
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT
          struct_or_union ::= * UNION
          enum_specifier ::= * ENUM LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST
          type_qualifier ::= * VOLATILE
          parameter_type_list ::= parameter_list COMMA * ELLIPSIS
          parameter_list ::= parameter_list COMMA * parameter_declaration
          parameter_declaration ::= * declaration_specifiers declarator
          parameter_declaration ::= * declaration_specifiers abstract_declarator
          parameter_declaration ::= * declaration_specifiers

                       TYPEDEF shift  282
                        EXTERN shift  281
                        STATIC shift  280
                          VOID shift  308
                          CHAR shift  307
                         SHORT shift  306
                           INT shift  305
                          LONG shift  304
                         FLOAT shift  303
                        DOUBLE shift  302
                        SIGNED shift  301
                      UNSIGNED shift  300
                     TYPE_NAME shift  297
                        STRUCT shift  295
                         UNION shift  294
                          ENUM shift  124
                         CONST shift  274
                      VOLATILE shift  273
                      ELLIPSIS shift  268
        declaration_specifiers shift  83
       storage_class_specifier shift  68
                type_specifier shift  67
                type_qualifier shift  66
     struct_or_union_specifier shift  299
                enum_specifier shift  298
               struct_or_union shift  127
         parameter_declaration shift  267

State 60:
          type_specifier ::= * VOID
          type_specifier ::= * CHAR
          type_specifier ::= * SHORT
          type_specifier ::= * INT
          type_specifier ::= * LONG
          type_specifier ::= * FLOAT
          type_specifier ::= * DOUBLE
          type_specifier ::= * SIGNED
          type_specifier ::= * UNSIGNED
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          type_specifier ::= * TYPE_NAME
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= struct_or_union LBRACE * struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT
          struct_or_union ::= * UNION
          struct_declaration_list ::= * struct_declaration
          struct_declaration_list ::= * struct_declaration_list struct_declaration
          struct_declaration ::= * specifier_qualifier_list struct_declarator_list SEMICOLON
          specifier_qualifier_list ::= * type_specifier specifier_qualifier_list
          specifier_qualifier_list ::= * type_specifier
          specifier_qualifier_list ::= * type_qualifier specifier_qualifier_list
          specifier_qualifier_list ::= * type_qualifier
          enum_specifier ::= * ENUM LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST
          type_qualifier ::= * VOLATILE

                          VOID shift  308
                          CHAR shift  307
                         SHORT shift  306
                           INT shift  305
                          LONG shift  304
                         FLOAT shift  303
                        DOUBLE shift  302
                        SIGNED shift  301
                      UNSIGNED shift  300
                     TYPE_NAME shift  297
                        STRUCT shift  295
                         UNION shift  294
                          ENUM shift  124
                         CONST shift  274
                      VOLATILE shift  273
                type_specifier shift  74
                type_qualifier shift  73
     struct_or_union_specifier shift  299
                enum_specifier shift  298
               struct_or_union shift  127
       struct_declaration_list shift  69
            struct_declaration shift  244
      specifier_qualifier_list shift  84

State 61:
          type_specifier ::= * VOID
          type_specifier ::= * CHAR
          type_specifier ::= * SHORT
          type_specifier ::= * INT
          type_specifier ::= * LONG
          type_specifier ::= * FLOAT
          type_specifier ::= * DOUBLE
          type_specifier ::= * SIGNED
          type_specifier ::= * UNSIGNED
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          type_specifier ::= * TYPE_NAME
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= struct_or_union IDENTIFIER LBRACE * struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT
          struct_or_union ::= * UNION
          struct_declaration_list ::= * struct_declaration
          struct_declaration_list ::= * struct_declaration_list struct_declaration
          struct_declaration ::= * specifier_qualifier_list struct_declarator_list SEMICOLON
          specifier_qualifier_list ::= * type_specifier specifier_qualifier_list
          specifier_qualifier_list ::= * type_specifier
          specifier_qualifier_list ::= * type_qualifier specifier_qualifier_list
          specifier_qualifier_list ::= * type_qualifier
          enum_specifier ::= * ENUM LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST
          type_qualifier ::= * VOLATILE

                          VOID shift  308
                          CHAR shift  307
                         SHORT shift  306
                           INT shift  305
                          LONG shift  304
                         FLOAT shift  303
                        DOUBLE shift  302
                        SIGNED shift  301
                      UNSIGNED shift  300
                     TYPE_NAME shift  297
                        STRUCT shift  295
                         UNION shift  294
                          ENUM shift  124
                         CONST shift  274
                      VOLATILE shift  273
                type_specifier shift  74
                type_qualifier shift  73
     struct_or_union_specifier shift  299
                enum_specifier shift  298
               struct_or_union shift  127
       struct_declaration_list shift  70
            struct_declaration shift  244
      specifier_qualifier_list shift  84

State 62:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= relational_expression GE_OP * shift_expression

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
            primary_expression shift  339
            postfix_expression shift  102
              unary_expression shift  327
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  132

State 63:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= relational_expression LE_OP * shift_expression

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
            primary_expression shift  339
            postfix_expression shift  102
              unary_expression shift  327
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  133

State 64:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= relational_expression MORE * shift_expression

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
            primary_expression shift  339
            postfix_expression shift  102
              unary_expression shift  327
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  134

State 65:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= * additive_expression
          shift_expression ::= * shift_expression LEFT_OP additive_expression
          shift_expression ::= * shift_expression RIGHT_OP additive_expression
          relational_expression ::= relational_expression LESS * shift_expression

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
            primary_expression shift  339
            postfix_expression shift  102
              unary_expression shift  327
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  139
              shift_expression shift  135

State 66:
          declaration_specifiers ::= * storage_class_specifier
          declaration_specifiers ::= * storage_class_specifier declaration_specifiers
          declaration_specifiers ::= * type_specifier
          declaration_specifiers ::= * type_specifier declaration_specifiers
          declaration_specifiers ::= * type_qualifier
     (80) declaration_specifiers ::= type_qualifier *
          declaration_specifiers ::= * type_qualifier declaration_specifiers
          declaration_specifiers ::= type_qualifier * declaration_specifiers
          storage_class_specifier ::= * TYPEDEF
          storage_class_specifier ::= * EXTERN
          storage_class_specifier ::= * STATIC
          type_specifier ::= * VOID
          type_specifier ::= * CHAR
          type_specifier ::= * SHORT
          type_specifier ::= * INT
          type_specifier ::= * LONG
          type_specifier ::= * FLOAT
          type_specifier ::= * DOUBLE
          type_specifier ::= * SIGNED
          type_specifier ::= * UNSIGNED
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          type_specifier ::= * TYPE_NAME
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT
          struct_or_union ::= * UNION
          enum_specifier ::= * ENUM LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST
          type_qualifier ::= * VOLATILE

                       TYPEDEF shift  282
                        EXTERN shift  281
                        STATIC shift  280
                          VOID shift  308
                          CHAR shift  307
                         SHORT shift  306
                           INT shift  305
                          LONG shift  304
                         FLOAT shift  303
                        DOUBLE shift  302
                        SIGNED shift  301
                      UNSIGNED shift  300
                     TYPE_NAME shift  297
                        STRUCT shift  295
                         UNION shift  294
                          ENUM shift  124
                         CONST shift  274
                      VOLATILE shift  273
        declaration_specifiers shift  283
       storage_class_specifier shift  68
                type_specifier shift  67
                type_qualifier shift  66
     struct_or_union_specifier shift  299
                enum_specifier shift  298
               struct_or_union shift  127
                     {default} reduce 80

State 67:
          declaration_specifiers ::= * storage_class_specifier
          declaration_specifiers ::= * storage_class_specifier declaration_specifiers
          declaration_specifiers ::= * type_specifier
     (78) declaration_specifiers ::= type_specifier *
          declaration_specifiers ::= * type_specifier declaration_specifiers
          declaration_specifiers ::= type_specifier * declaration_specifiers
          declaration_specifiers ::= * type_qualifier
          declaration_specifiers ::= * type_qualifier declaration_specifiers
          storage_class_specifier ::= * TYPEDEF
          storage_class_specifier ::= * EXTERN
          storage_class_specifier ::= * STATIC
          type_specifier ::= * VOID
          type_specifier ::= * CHAR
          type_specifier ::= * SHORT
          type_specifier ::= * INT
          type_specifier ::= * LONG
          type_specifier ::= * FLOAT
          type_specifier ::= * DOUBLE
          type_specifier ::= * SIGNED
          type_specifier ::= * UNSIGNED
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          type_specifier ::= * TYPE_NAME
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT
          struct_or_union ::= * UNION
          enum_specifier ::= * ENUM LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST
          type_qualifier ::= * VOLATILE

                       TYPEDEF shift  282
                        EXTERN shift  281
                        STATIC shift  280
                          VOID shift  308
                          CHAR shift  307
                         SHORT shift  306
                           INT shift  305
                          LONG shift  304
                         FLOAT shift  303
                        DOUBLE shift  302
                        SIGNED shift  301
                      UNSIGNED shift  300
                     TYPE_NAME shift  297
                        STRUCT shift  295
                         UNION shift  294
                          ENUM shift  124
                         CONST shift  274
                      VOLATILE shift  273
        declaration_specifiers shift  284
       storage_class_specifier shift  68
                type_specifier shift  67
                type_qualifier shift  66
     struct_or_union_specifier shift  299
                enum_specifier shift  298
               struct_or_union shift  127
                     {default} reduce 78

State 68:
          declaration_specifiers ::= * storage_class_specifier
     (76) declaration_specifiers ::= storage_class_specifier *
          declaration_specifiers ::= * storage_class_specifier declaration_specifiers
          declaration_specifiers ::= storage_class_specifier * declaration_specifiers
          declaration_specifiers ::= * type_specifier
          declaration_specifiers ::= * type_specifier declaration_specifiers
          declaration_specifiers ::= * type_qualifier
          declaration_specifiers ::= * type_qualifier declaration_specifiers
          storage_class_specifier ::= * TYPEDEF
          storage_class_specifier ::= * EXTERN
          storage_class_specifier ::= * STATIC
          type_specifier ::= * VOID
          type_specifier ::= * CHAR
          type_specifier ::= * SHORT
          type_specifier ::= * INT
          type_specifier ::= * LONG
          type_specifier ::= * FLOAT
          type_specifier ::= * DOUBLE
          type_specifier ::= * SIGNED
          type_specifier ::= * UNSIGNED
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          type_specifier ::= * TYPE_NAME
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT
          struct_or_union ::= * UNION
          enum_specifier ::= * ENUM LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST
          type_qualifier ::= * VOLATILE

                       TYPEDEF shift  282
                        EXTERN shift  281
                        STATIC shift  280
                          VOID shift  308
                          CHAR shift  307
                         SHORT shift  306
                           INT shift  305
                          LONG shift  304
                         FLOAT shift  303
                        DOUBLE shift  302
                        SIGNED shift  301
                      UNSIGNED shift  300
                     TYPE_NAME shift  297
                        STRUCT shift  295
                         UNION shift  294
                          ENUM shift  124
                         CONST shift  274
                      VOLATILE shift  273
        declaration_specifiers shift  285
       storage_class_specifier shift  68
                type_specifier shift  67
                type_qualifier shift  66
     struct_or_union_specifier shift  299
                enum_specifier shift  298
               struct_or_union shift  127
                     {default} reduce 76

State 69:
          type_specifier ::= * VOID
          type_specifier ::= * CHAR
          type_specifier ::= * SHORT
          type_specifier ::= * INT
          type_specifier ::= * LONG
          type_specifier ::= * FLOAT
          type_specifier ::= * DOUBLE
          type_specifier ::= * SIGNED
          type_specifier ::= * UNSIGNED
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          type_specifier ::= * TYPE_NAME
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= struct_or_union LBRACE struct_declaration_list * RBRACE
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT
          struct_or_union ::= * UNION
          struct_declaration_list ::= struct_declaration_list * struct_declaration
          struct_declaration ::= * specifier_qualifier_list struct_declarator_list SEMICOLON
          specifier_qualifier_list ::= * type_specifier specifier_qualifier_list
          specifier_qualifier_list ::= * type_specifier
          specifier_qualifier_list ::= * type_qualifier specifier_qualifier_list
          specifier_qualifier_list ::= * type_qualifier
          enum_specifier ::= * ENUM LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST
          type_qualifier ::= * VOLATILE

                          VOID shift  308
                          CHAR shift  307
                         SHORT shift  306
                           INT shift  305
                          LONG shift  304
                         FLOAT shift  303
                        DOUBLE shift  302
                        SIGNED shift  301
                      UNSIGNED shift  300
                     TYPE_NAME shift  297
                        RBRACE shift  243
                        STRUCT shift  295
                         UNION shift  294
                          ENUM shift  124
                         CONST shift  274
                      VOLATILE shift  273
                type_specifier shift  74
                type_qualifier shift  73
     struct_or_union_specifier shift  299
                enum_specifier shift  298
               struct_or_union shift  127
            struct_declaration shift  293
      specifier_qualifier_list shift  84

State 70:
          type_specifier ::= * VOID
          type_specifier ::= * CHAR
          type_specifier ::= * SHORT
          type_specifier ::= * INT
          type_specifier ::= * LONG
          type_specifier ::= * FLOAT
          type_specifier ::= * DOUBLE
          type_specifier ::= * SIGNED
          type_specifier ::= * UNSIGNED
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          type_specifier ::= * TYPE_NAME
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= struct_or_union IDENTIFIER LBRACE struct_declaration_list * RBRACE
          struct_or_union_specifier ::= * struct_or_union LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT
          struct_or_union ::= * UNION
          struct_declaration_list ::= struct_declaration_list * struct_declaration
          struct_declaration ::= * specifier_qualifier_list struct_declarator_list SEMICOLON
          specifier_qualifier_list ::= * type_specifier specifier_qualifier_list
          specifier_qualifier_list ::= * type_specifier
          specifier_qualifier_list ::= * type_qualifier specifier_qualifier_list
          specifier_qualifier_list ::= * type_qualifier
          enum_specifier ::= * ENUM LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST
          type_qualifier ::= * VOLATILE

                          VOID shift  308
                          CHAR shift  307
                         SHORT shift  306
                           INT shift  305
                          LONG shift  304
                         FLOAT shift  303
                        DOUBLE shift  302
                        SIGNED shift  301
                      UNSIGNED shift  300
                     TYPE_NAME shift  297
                        RBRACE shift  296
                        STRUCT shift  295
                         UNION shift  294
                          ENUM shift  124
                         CONST shift  274
                      VOLATILE shift  273
                type_specifier shift  74
                type_qualifier shift  73
     struct_or_union_specifier shift  299
                enum_specifier shift  298
               struct_or_union shift  127
            struct_declaration shift  293
      specifier_qualifier_list shift  84

State 71:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= shift_expression RIGHT_OP * additive_expression

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
            primary_expression shift  339
            postfix_expression shift  102
              unary_expression shift  327
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  136

State 72:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= * multiplicative_expression
          additive_expression ::= * additive_expression PLUS multiplicative_expression
          additive_expression ::= * additive_expression MINUS multiplicative_expression
          shift_expression ::= shift_expression LEFT_OP * additive_expression

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
            primary_expression shift  339
            postfix_expression shift  102
              unary_expression shift  327
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  108
           additive_expression shift  137

State 73:
          type_specifier ::= * VOID
          type_specifier ::= * CHAR
          type_specifier ::= * SHORT
          type_specifier ::= * INT
          type_specifier ::= * LONG
          type_specifier ::= * FLOAT
          type_specifier ::= * DOUBLE
          type_specifier ::= * SIGNED
          type_specifier ::= * UNSIGNED
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          type_specifier ::= * TYPE_NAME
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT
          struct_or_union ::= * UNION
          specifier_qualifier_list ::= * type_specifier specifier_qualifier_list
          specifier_qualifier_list ::= * type_specifier
          specifier_qualifier_list ::= * type_qualifier specifier_qualifier_list
          specifier_qualifier_list ::= type_qualifier * specifier_qualifier_list
          specifier_qualifier_list ::= * type_qualifier
    (112) specifier_qualifier_list ::= type_qualifier *
          enum_specifier ::= * ENUM LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST
          type_qualifier ::= * VOLATILE

                          VOID shift  308
                          CHAR shift  307
                         SHORT shift  306
                           INT shift  305
                          LONG shift  304
                         FLOAT shift  303
                        DOUBLE shift  302
                        SIGNED shift  301
                      UNSIGNED shift  300
                     TYPE_NAME shift  297
                        STRUCT shift  295
                         UNION shift  294
                          ENUM shift  124
                         CONST shift  274
                      VOLATILE shift  273
                type_specifier shift  74
                type_qualifier shift  73
     struct_or_union_specifier shift  299
                enum_specifier shift  298
               struct_or_union shift  127
      specifier_qualifier_list shift  245
                     {default} reduce 112

State 74:
          type_specifier ::= * VOID
          type_specifier ::= * CHAR
          type_specifier ::= * SHORT
          type_specifier ::= * INT
          type_specifier ::= * LONG
          type_specifier ::= * FLOAT
          type_specifier ::= * DOUBLE
          type_specifier ::= * SIGNED
          type_specifier ::= * UNSIGNED
          type_specifier ::= * struct_or_union_specifier
          type_specifier ::= * enum_specifier
          type_specifier ::= * TYPE_NAME
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= * struct_or_union IDENTIFIER
          struct_or_union ::= * STRUCT
          struct_or_union ::= * UNION
          specifier_qualifier_list ::= * type_specifier specifier_qualifier_list
          specifier_qualifier_list ::= type_specifier * specifier_qualifier_list
          specifier_qualifier_list ::= * type_specifier
    (110) specifier_qualifier_list ::= type_specifier *
          specifier_qualifier_list ::= * type_qualifier specifier_qualifier_list
          specifier_qualifier_list ::= * type_qualifier
          enum_specifier ::= * ENUM LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER LBRACE enumerator_list RBRACE
          enum_specifier ::= * ENUM IDENTIFIER
          type_qualifier ::= * CONST
          type_qualifier ::= * VOLATILE

                          VOID shift  308
                          CHAR shift  307
                         SHORT shift  306
                           INT shift  305
                          LONG shift  304
                         FLOAT shift  303
                        DOUBLE shift  302
                        SIGNED shift  301
                      UNSIGNED shift  300
                     TYPE_NAME shift  297
                        STRUCT shift  295
                         UNION shift  294
                          ENUM shift  124
                         CONST shift  274
                      VOLATILE shift  273
                type_specifier shift  74
                type_qualifier shift  73
     struct_or_union_specifier shift  299
                enum_specifier shift  298
               struct_or_union shift  127
      specifier_qualifier_list shift  246
                     {default} reduce 110

State 75:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= additive_expression MINUS * multiplicative_expression

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
            primary_expression shift  339
            postfix_expression shift  102
              unary_expression shift  327
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  106

State 76:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= * cast_expression
          multiplicative_expression ::= * multiplicative_expression MULT cast_expression
          multiplicative_expression ::= * multiplicative_expression DIV cast_expression
          multiplicative_expression ::= * multiplicative_expression MOD cast_expression
          additive_expression ::= additive_expression PLUS * multiplicative_expression

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
            primary_expression shift  339
            postfix_expression shift  102
              unary_expression shift  327
                unary_operator shift  81
               cast_expression shift  328
     multiplicative_expression shift  107

State 77:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          cast_expression ::= LPARENS type_name RPARENS * cast_expression

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
            primary_expression shift  339
            postfix_expression shift  102
              unary_expression shift  327
                unary_operator shift  81
               cast_expression shift  230

State 78:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= multiplicative_expression MOD * cast_expression

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
            primary_expression shift  339
            postfix_expression shift  102
              unary_expression shift  327
                unary_operator shift  81
               cast_expression shift  324

State 79:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= multiplicative_expression DIV * cast_expression

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
            primary_expression shift  339
            postfix_expression shift  102
              unary_expression shift  327
                unary_operator shift  81
               cast_expression shift  325

State 80:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression
          multiplicative_expression ::= multiplicative_expression MULT * cast_expression

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
            primary_expression shift  339
            postfix_expression shift  102
              unary_expression shift  327
                unary_operator shift  81
               cast_expression shift  326

State 81:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= unary_operator * cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG
          cast_expression ::= * unary_expression
          cast_expression ::= * LPARENS type_name RPARENS cast_expression

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  4
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
            primary_expression shift  339
            postfix_expression shift  102
              unary_expression shift  327
                unary_operator shift  81
               cast_expression shift  336

State 82:
          declaration ::= declaration_specifiers * SEMICOLON
          declaration ::= declaration_specifiers * init_declarator_list SEMICOLON
          init_declarator_list ::= * init_declarator
          init_declarator_list ::= * init_declarator_list COMMA init_declarator
          init_declarator ::= * declarator
          init_declarator ::= * declarator EQUALS initializer
          declarator ::= * pointer direct_declarator
          declarator ::= * direct_declarator
          direct_declarator ::= * IDENTIFIER
          direct_declarator ::= * LPARENS declarator RPARENS
          direct_declarator ::= * direct_declarator LBRACKET constant_expression RBRACE
          direct_declarator ::= * direct_declarator LBRACKET RBRACE
          direct_declarator ::= * direct_declarator LPARENS parameter_type_list RPARENS
          direct_declarator ::= * direct_declarator LPARENS identifier_list RPARENS
          direct_declarator ::= * direct_declarator LPARENS RPARENS
          pointer ::= * MULT
          pointer ::= * MULT type_qualifier_list
          pointer ::= * MULT pointer
          pointer ::= * MULT type_qualifier_list pointer

                    IDENTIFIER shift  266
                       LPARENS shift  92
                          MULT shift  93
                     SEMICOLON shift  346
          init_declarator_list shift  142
               init_declarator shift  223
                    declarator shift  184
                       pointer shift  100
             direct_declarator shift  120

State 83:
          declarator ::= * pointer direct_declarator
          declarator ::= * direct_declarator
          direct_declarator ::= * IDENTIFIER
          direct_declarator ::= * LPARENS declarator RPARENS
          direct_declarator ::= * direct_declarator LBRACKET constant_expression RBRACE
          direct_declarator ::= * direct_declarator LBRACKET RBRACE
          direct_declarator ::= * direct_declarator LPARENS parameter_type_list RPARENS
          direct_declarator ::= * direct_declarator LPARENS identifier_list RPARENS
          direct_declarator ::= * direct_declarator LPARENS RPARENS
          pointer ::= * MULT
          pointer ::= * MULT type_qualifier_list
          pointer ::= * MULT pointer
          pointer ::= * MULT type_qualifier_list pointer
          parameter_declaration ::= declaration_specifiers * declarator
          parameter_declaration ::= declaration_specifiers * abstract_declarator
    (148) parameter_declaration ::= declaration_specifiers *
          abstract_declarator ::= * pointer
          abstract_declarator ::= * direct_abstract_declarator
          abstract_declarator ::= * pointer direct_abstract_declarator
          direct_abstract_declarator ::= * LPARENS abstract_declarator RPARENS
          direct_abstract_declarator ::= * LBRACE RBRACE
          direct_abstract_declarator ::= * LBRACE constant_expression RBRACE
          direct_abstract_declarator ::= * direct_abstract_declarator LBRACE RBRACE
          direct_abstract_declarator ::= * direct_abstract_declarator LBRACE constant_expression RBRACE
          direct_abstract_declarator ::= * LPARENS RPARENS
          direct_abstract_declarator ::= * LPARENS parameter_type_list RPARENS
          direct_abstract_declarator ::= * direct_abstract_declarator LPARENS RPARENS
          direct_abstract_declarator ::= * direct_abstract_declarator LPARENS parameter_type_list RPARENS

                    IDENTIFIER shift  266
                       LPARENS shift  43
                          MULT shift  93
                        LBRACE shift  32
                    declarator shift  250
                       pointer shift  95
             direct_declarator shift  120
           abstract_declarator shift  249
    direct_abstract_declarator shift  119
                     {default} reduce 148

State 84:
          struct_declaration ::= specifier_qualifier_list * struct_declarator_list SEMICOLON
          struct_declarator_list ::= * struct_declarator
          struct_declarator_list ::= * struct_declarator_list COMMA struct_declarator
          struct_declarator ::= * declarator
          struct_declarator ::= * COLON constant_expression
          struct_declarator ::= * declarator COLON constant_expression
          declarator ::= * pointer direct_declarator
          declarator ::= * direct_declarator
          direct_declarator ::= * IDENTIFIER
          direct_declarator ::= * LPARENS declarator RPARENS
          direct_declarator ::= * direct_declarator LBRACKET constant_expression RBRACE
          direct_declarator ::= * direct_declarator LBRACKET RBRACE
          direct_declarator ::= * direct_declarator LPARENS parameter_type_list RPARENS
          direct_declarator ::= * direct_declarator LPARENS identifier_list RPARENS
          direct_declarator ::= * direct_declarator LPARENS RPARENS
          pointer ::= * MULT
          pointer ::= * MULT type_qualifier_list
          pointer ::= * MULT pointer
          pointer ::= * MULT type_qualifier_list pointer

                    IDENTIFIER shift  266
                       LPARENS shift  92
                          MULT shift  93
                         COLON shift  38
                    declarator shift  173
        struct_declarator_list shift  126
             struct_declarator shift  247
                       pointer shift  100
             direct_declarator shift  120

State 85:
          declaration ::= declaration_specifiers * SEMICOLON
          declaration ::= declaration_specifiers * init_declarator_list SEMICOLON
          init_declarator_list ::= * init_declarator
          init_declarator_list ::= * init_declarator_list COMMA init_declarator
          init_declarator ::= * declarator
          init_declarator ::= * declarator EQUALS initializer
          declarator ::= * pointer direct_declarator
          declarator ::= * direct_declarator
          direct_declarator ::= * IDENTIFIER
          direct_declarator ::= * LPARENS declarator RPARENS
          direct_declarator ::= * direct_declarator LBRACKET constant_expression RBRACE
          direct_declarator ::= * direct_declarator LBRACKET RBRACE
          direct_declarator ::= * direct_declarator LPARENS parameter_type_list RPARENS
          direct_declarator ::= * direct_declarator LPARENS identifier_list RPARENS
          direct_declarator ::= * direct_declarator LPARENS RPARENS
          pointer ::= * MULT
          pointer ::= * MULT type_qualifier_list
          pointer ::= * MULT pointer
          pointer ::= * MULT type_qualifier_list pointer
          function_definition ::= declaration_specifiers * declarator declaration_list compound_statement
          function_definition ::= declaration_specifiers * declarator compound_statement

                    IDENTIFIER shift  266
                       LPARENS shift  92
                          MULT shift  93
                     SEMICOLON shift  346
          init_declarator_list shift  142
               init_declarator shift  223
                    declarator shift  51
                       pointer shift  100
             direct_declarator shift  120

State 86:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= SIZEOF * unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_expression ::= SIZEOF * LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  3
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
            primary_expression shift  339
            postfix_expression shift  102
              unary_expression shift  241
                unary_operator shift  81

State 87:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= DEC_OP * unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  30
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
            primary_expression shift  339
            postfix_expression shift  102
              unary_expression shift  337
                unary_operator shift  81

State 88:
          primary_expression ::= * IDENTIFIER
          primary_expression ::= * CONSTANT
          primary_expression ::= * STRING_LITERAL
          primary_expression ::= * LPARENS expression RPARENS
          postfix_expression ::= * primary_expression
          postfix_expression ::= * postfix_expression LBRACKET expression RBRACKET
          postfix_expression ::= * postfix_expression LPARENS RPARENS
          postfix_expression ::= * postfix_expression LPARENS argument_expression_list RPARENS
          postfix_expression ::= * postfix_expression DOT IDENTIFIER
          postfix_expression ::= * postfix_expression PTR_OP IDENTIFIER
          postfix_expression ::= * postfix_expression INC_OP
          postfix_expression ::= * postfix_expression DEC_OP
          unary_expression ::= * postfix_expression
          unary_expression ::= * INC_OP unary_expression
          unary_expression ::= INC_OP * unary_expression
          unary_expression ::= * DEC_OP unary_expression
          unary_expression ::= * unary_operator cast_expression
          unary_expression ::= * SIZEOF unary_expression
          unary_expression ::= * SIZEOF LPARENS type_name RPARENS
          unary_operator ::= * AND
          unary_operator ::= * MULT
          unary_operator ::= * PLUS
          unary_operator ::= * MINUS
          unary_operator ::= * TILDE
          unary_operator ::= * BANG

                    IDENTIFIER shift  343
                      CONSTANT shift  342
                STRING_LITERAL shift  341
                       LPARENS shift  30
                        INC_OP shift  88
                        DEC_OP shift  87
                        SIZEOF shift  86
                           AND shift  334
                          MULT shift  333
                          PLUS shift  332
                         MINUS shift  331
                         TILDE shift  330
                          BANG shift  329
            primary_expression shift  339
            postfix_expression shift  102
              unary_expression shift  240
                unary_operator shift  81

State 89:
          struct_declarator_list ::= struct_declarator_list COMMA * struct_declarator
          struct_declarator ::= * declarator
          struct_declarator ::= * COLON constant_expression
          struct_declarator ::= * declarator COLON constant_expression
          declarator ::= * pointer direct_declarator
          declarator ::= * direct_declarator
          direct_declarator ::= * IDENTIFIER
          direct_declarator ::= * LPARENS declarator RPARENS
          direct_declarator ::= * direct_declarator LBRACKET constant_expression RBRACE
          direct_declarator ::= * direct_declarator LBRACKET RBRACE
          direct_declarator ::= * direct_declarator LPARENS parameter_type_list RPARENS
          direct_declarator ::= * direct_declarator LPARENS identifier_list RPARENS
          direct_declarator ::= * direct_declarator LPARENS RPARENS
          pointer ::= * MULT
          pointer ::= * MULT type_qualifier_list
          pointer ::= * MULT pointer
          pointer ::= * MULT type_qualifier_list pointer

                    IDENTIFIER shift  266
                       LPARENS shift  92
                          MULT shift  93
                         COLON shift  38
                    declarator shift  173
             struct_declarator shift  291
                       pointer shift  100
             direct_declarator shift  120

State 90:
          init_declarator_list ::= init_declarator_list COMMA * init_declarator
          init_declarator ::= * declarator
          init_declarator ::= * declarator EQUALS initializer
          declarator ::= * pointer direct_declarator
          declarator ::= * direct_declarator
          direct_declarator ::= * IDENTIFIER
          direct_declarator ::= * LPARENS declarator RPARENS
          direct_declarator ::= * direct_declarator LBRACKET constant_expression RBRACE
          direct_declarator ::= * direct_declarator LBRACKET RBRACE
          direct_declarator ::= * direct_declarator LPARENS parameter_type_list RPARENS
          direct_declarator ::= * direct_declarator LPARENS identifier_list RPARENS
          direct_declarator ::= * direct_declarator LPARENS RPARENS
          pointer ::= * MULT
          pointer ::= * MULT type_qualifier_list
          pointer ::= * MULT pointer
          pointer ::= * MULT type_qualifier_list pointer

                    IDENTIFIER shift  266
                       LPARENS shift  92
                          MULT shift  93
               init_declarator shift  344
                    declarator shift  184
                       pointer shift  100
             direct_declarator shift  120

State 91:
          pointer ::= * MULT
          pointer ::= * MULT type_qualifier_list
          pointer ::= * MULT pointer
          pointer ::= * MULT type_qualifier_list pointer
    (151) type_name ::= specifier_qualifier_list *
          type_name ::= specifier_qualifier_list * abstract_declarator
          abstract_declarator ::= * pointer
          abstract_declarator ::= * direct_abstract_declarator
          abstract_declarator ::= * pointer direct_abstract_declarator
          direct_abstract_declarator ::= * LPARENS abstract_declarator RPARENS
          direct_abstract_declarator ::= * LBRACE RBRACE
          direct_abstract_declarator ::= * LBRACE constant_expression RBRACE
          direct_abstract_declarator ::= * direct_abstract_declarator LBRACE RBRACE
          direct_abstract_declarator ::= * direct_abstract_declarator LBRACE constant_expression RBRACE
          direct_abstract_declarator ::= * LPARENS RPARENS
          direct_abstract_declarator ::= * LPARENS parameter_type_list RPARENS
          direct_abstract_declarator ::= * direct_abstract_declarator LPARENS RPARENS
          direct_abstract_declarator ::= * direct_abstract_declarator LPARENS parameter_type_list RPARENS

                       LPARENS shift  46
                          MULT shift  93
                        LBRACE shift  32
                       pointer shift  99
           abstract_declarator shift  242
    direct_abstract_declarator shift  119
                     {default} reduce 151

State 92:
          declarator ::= * pointer direct_declarator
          declarator ::= * direct_declarator
          direct_declarator ::= * IDENTIFIER
          direct_declarator ::= * LPARENS declarator RPARENS
          direct_declarator ::= LPARENS * declarator RPARENS
          direct_declarator ::= * direct_declarator LBRACKET constant_expression RBRACE
          direct_declarator ::= * direct_declarator LBRACKET RBRACE
          direct_declarator ::= * direct_declarator LPARENS parameter_type_list RPARENS
          direct_declarator ::= * direct_declarator LPARENS identifier_list RPARENS
          direct_declarator ::= * direct_declarator LPARENS RPARENS
          pointer ::= * MULT
          pointer ::= * MULT type_qualifier_list
          pointer ::= * MULT pointer
          pointer ::= * MULT type_qualifier_list pointer

                    IDENTIFIER shift  266
                       LPARENS shift  92
                          MULT shift  93
                    declarator shift  166
                       pointer shift  100
             direct_declarator shift  120

State 93:
          type_qualifier ::= * CONST
          type_qualifier ::= * VOLATILE
          pointer ::= * MULT
    (136) pointer ::= MULT *
          pointer ::= * MULT type_qualifier_list
          pointer ::= MULT * type_qualifier_list
          pointer ::= * MULT pointer
          pointer ::= MULT * pointer
          pointer ::= * MULT type_qualifier_list pointer
          pointer ::= MULT * type_qualifier_list pointer
          type_qualifier_list ::= * type_qualifier
          type_qualifier_list ::= * type_qualifier_list type_qualifier

                          MULT shift  93
                         CONST shift  274
                      VOLATILE shift  273
                type_qualifier shift  261
                       pointer shift  262
           type_qualifier_list shift  94
                     {default} reduce 136

State 94:
          type_qualifier ::= * CONST
          type_qualifier ::= * VOLATILE
          pointer ::= * MULT
          pointer ::= * MULT type_qualifier_list
    (137) pointer ::= MULT type_qualifier_list *
          pointer ::= * MULT pointer
          pointer ::= * MULT type_qualifier_list pointer
          pointer ::= MULT type_qualifier_list * pointer
          type_qualifier_list ::= type_qualifier_list * type_qualifier

                          MULT shift  93
                         CONST shift  274
                      VOLATILE shift  273
                type_qualifier shift  263
                       pointer shift  264
                     {default} reduce 137

State 95:
          declarator ::= pointer * direct_declarator
          direct_declarator ::= * IDENTIFIER
          direct_declarator ::= * LPARENS declarator RPARENS
          direct_declarator ::= * direct_declarator LBRACKET constant_expression RBRACE
          direct_declarator ::= * direct_declarator LBRACKET RBRACE
          direct_declarator ::= * direct_declarator LPARENS parameter_type_list RPARENS
          direct_declarator ::= * direct_declarator LPARENS identifier_list RPARENS
          direct_declarator ::= * direct_declarator LPARENS RPARENS
    (153) abstract_declarator ::= pointer *
          abstract_declarator ::= pointer * direct_abstract_declarator
          direct_abstract_declarator ::= * LPARENS abstract_declarator RPARENS
          direct_abstract_declarator ::= * LBRACE RBRACE
          direct_abstract_declarator ::= * LBRACE constant_expression RBRACE
          direct_abstract_declarator ::= * direct_abstract_declarator LBRACE RBRACE
          direct_abstract_declarator ::= * direct_abstract_declarator LBRACE constant_expression RBRACE
          direct_abstract_declarator ::= * LPARENS RPARENS
          direct_abstract_declarator ::= * LPARENS parameter_type_list RPARENS
          direct_abstract_declarator ::= * direct_abstract_declarator LPARENS RPARENS
          direct_abstract_declarator ::= * direct_abstract_declarator LPARENS parameter_type_list RPARENS

                    IDENTIFIER shift  266
                       LPARENS shift  43
                        LBRACE shift  32
             direct_declarator shift  125
    direct_abstract_declarator shift  118
                     {default} reduce 153

State 96:
          enum_specifier ::= ENUM IDENTIFIER LBRACE * enumerator_list RBRACE
          enumerator_list ::= * enumerator
          enumerator_list ::= * enumerator_list COMMA enumerator
          enumerator ::= * IDENTIFIER
          enumerator ::= * IDENTIFIER EQUALS constant_expression

                    IDENTIFIER shift  171
               enumerator_list shift  122
                    enumerator shift  276

State 97:
          enum_specifier ::= ENUM LBRACE * enumerator_list RBRACE
          enumerator_list ::= * enumerator
          enumerator_list ::= * enumerator_list COMMA enumerator
          enumerator ::= * IDENTIFIER
          enumerator ::= * IDENTIFIER EQUALS constant_expression

                    IDENTIFIER shift  171
               enumerator_list shift  123
                    enumerator shift  276

State 98:
     (26) cast_expression ::= unary_expression *
          assignment_expression ::= unary_expression * assignment_operator assignment_expression
          assignment_operator ::= * EQUALS
          assignment_operator ::= * MUL_ASSIGN
          assignment_operator ::= * DIV_ASSIGN
          assignment_operator ::= * MOD_ASSIGN
          assignment_operator ::= * ADD_ASSIGN
          assignment_operator ::= * SUB_ASSIGN
          assignment_operator ::= * LEFT_ASSIGN
          assignment_operator ::= * RIGHT_ASSIGN
          assignment_operator ::= * AND_ASSIGN
          assignment_operator ::= * XOR_ASSIGN
          assignment_operator ::= * OR_ASSIGN

                        EQUALS shift  319
                    MUL_ASSIGN shift  318
                    DIV_ASSIGN shift  317
                    MOD_ASSIGN shift  316
                    ADD_ASSIGN shift  315
                    SUB_ASSIGN shift  314
                   LEFT_ASSIGN shift  313
                  RIGHT_ASSIGN shift  312
                    AND_ASSIGN shift  311
                    XOR_ASSIGN shift  310
                     OR_ASSIGN shift  309
           assignment_operator shift  40
                     {default} reduce 26

State 99:
    (153) abstract_declarator ::= pointer *
          abstract_declarator ::= pointer * direct_abstract_declarator
          direct_abstract_declarator ::= * LPARENS abstract_declarator RPARENS
          direct_abstract_declarator ::= * LBRACE RBRACE
          direct_abstract_declarator ::= * LBRACE constant_expression RBRACE
          direct_abstract_declarator ::= * direct_abstract_declarator LBRACE RBRACE
          direct_abstract_declarator ::= * direct_abstract_declarator LBRACE constant_expression RBRACE
          direct_abstract_declarator ::= * LPARENS RPARENS
          direct_abstract_declarator ::= * LPARENS parameter_type_list RPARENS
          direct_abstract_declarator ::= * direct_abstract_declarator LPARENS RPARENS
          direct_abstract_declarator ::= * direct_abstract_declarator LPARENS parameter_type_list RPARENS

                       LPARENS shift  46
                        LBRACE shift  32
    direct_abstract_declarator shift  118
                     {default} reduce 153

State 100:
          declarator ::= pointer * direct_declarator
          direct_declarator ::= * IDENTIFIER
          direct_declarator ::= * LPARENS declarator RPARENS
          direct_declarator ::= * direct_declarator LBRACKET constant_expression RBRACE
          direct_declarator ::= * direct_declarator LBRACKET RBRACE
          direct_declarator ::= * direct_declarator LPARENS parameter_type_list RPARENS
          direct_declarator ::= * direct_declarator LPARENS identifier_list RPARENS
          direct_declarator ::= * direct_declarator LPARENS RPARENS

                    IDENTIFIER shift  266
                       LPARENS shift  92
             direct_declarator shift  125

State 101:
          enumerator_list ::= enumerator_list COMMA * enumerator
          enumerator ::= * IDENTIFIER
          enumerator ::= * IDENTIFIER EQUALS constant_expression

                    IDENTIFIER shift  171
                    enumerator shift  278

State 102:
          postfix_expression ::= postfix_expression * LBRACKET expression RBRACKET
          postfix_expression ::= postfix_expression * LPARENS RPARENS
          postfix_expression ::= postfix_expression * LPARENS argument_expression_list RPARENS
          postfix_expression ::= postfix_expression * DOT IDENTIFIER
          postfix_expression ::= postfix_expression * PTR_OP IDENTIFIER
          postfix_expression ::= postfix_expression * INC_OP
          postfix_expression ::= postfix_expression * DEC_OP
     (14) unary_expression ::= postfix_expression *

                       LPARENS shift  23
                      LBRACKET shift  31
                           DOT shift  160
                        PTR_OP shift  159
                        INC_OP shift  233
                        DEC_OP shift  232
                     {default} reduce 14

State 103:
          relational_expression ::= relational_expression * LESS shift_expression
          relational_expression ::= relational_expression * MORE shift_expression
          relational_expression ::= relational_expression * LE_OP shift_expression
          relational_expression ::= relational_expression * GE_OP shift_expression
     (45) equality_expression ::= equality_expression NE_OP relational_expression *

                          LESS shift  65
                          MORE shift  64
                         LE_OP shift  63
                         GE_OP shift  62
                     {default} reduce 45

State 104:
          relational_expression ::= relational_expression * LESS shift_expression
          relational_expression ::= relational_expression * MORE shift_expression
          relational_expression ::= relational_expression * LE_OP shift_expression
          relational_expression ::= relational_expression * GE_OP shift_expression
     (44) equality_expression ::= equality_expression EQ_OP relational_expression *

                          LESS shift  65
                          MORE shift  64
                         LE_OP shift  63
                         GE_OP shift  62
                     {default} reduce 44

State 105:
          relational_expression ::= relational_expression * LESS shift_expression
          relational_expression ::= relational_expression * MORE shift_expression
          relational_expression ::= relational_expression * LE_OP shift_expression
          relational_expression ::= relational_expression * GE_OP shift_expression
     (43) equality_expression ::= relational_expression *

                          LESS shift  65
                          MORE shift  64
                         LE_OP shift  63
                         GE_OP shift  62
                     {default} reduce 43

State 106:
          multiplicative_expression ::= multiplicative_expression * MULT cast_expression
          multiplicative_expression ::= multiplicative_expression * DIV cast_expression
          multiplicative_expression ::= multiplicative_expression * MOD cast_expression
     (34) additive_expression ::= additive_expression MINUS multiplicative_expression *

                          MULT shift  80
                           DIV shift  79
                           MOD shift  78
                     {default} reduce 34

State 107:
          multiplicative_expression ::= multiplicative_expression * MULT cast_expression
          multiplicative_expression ::= multiplicative_expression * DIV cast_expression
          multiplicative_expression ::= multiplicative_expression * MOD cast_expression
     (33) additive_expression ::= additive_expression PLUS multiplicative_expression *

                          MULT shift  80
                           DIV shift  79
                           MOD shift  78
                     {default} reduce 33

State 108:
          multiplicative_expression ::= multiplicative_expression * MULT cast_expression
          multiplicative_expression ::= multiplicative_expression * DIV cast_expression
          multiplicative_expression ::= multiplicative_expression * MOD cast_expression
     (32) additive_expression ::= multiplicative_expression *

                          MULT shift  80
                           DIV shift  79
                           MOD shift  78
                     {default} reduce 32

State 109:
          expression ::= expression * COMMA assignment_expression
          jump_statement ::= RETURN expression * SEMICOLON

                         COMMA shift  41
                     SEMICOLON shift  203

State 110:
          expression ::= expression * COMMA assignment_expression
          iteration_statement ::= FOR LPARENS expression_statement expression_statement expression * RPARENS statement

                       RPARENS shift  8
                         COMMA shift  41

State 111:
          expression ::= expression * COMMA assignment_expression
          iteration_statement ::= DO statement WHILE LPARENS expression * RPARENS SEMICOLON

                       RPARENS shift  148
                         COMMA shift  41

State 112:
          expression ::= expression * COMMA assignment_expression
          iteration_statement ::= WHILE LPARENS expression * RPARENS statement

                       RPARENS shift  10
                         COMMA shift  41

State 113:
          expression ::= expression * COMMA assignment_expression
          selection_statement ::= SWITCH LPARENS expression * RPARENS statement

                       RPARENS shift  11
                         COMMA shift  41

State 114:
          expression ::= expression * COMMA assignment_expression
          selection_statement ::= IF LPARENS expression * RPARENS statement
          selection_statement ::= IF LPARENS expression * RPARENS statement ELSE statement

                       RPARENS shift  13
                         COMMA shift  41

State 115:
          expression ::= expression * COMMA assignment_expression
          expression_statement ::= expression * SEMICOLON

                         COMMA shift  41
                     SEMICOLON shift  222

State 116:
          initializer ::= LBRACKET initializer_list * RBRACKET
          initializer ::= LBRACKET initializer_list * COMMA RBRACKET
          initializer_list ::= initializer_list * COMMA initializer

                      RBRACKET shift  227
                         COMMA shift  20

State 117:
          postfix_expression ::= postfix_expression LPARENS argument_expression_list * RPARENS
          argument_expression_list ::= argument_expression_list * COMMA assignment_expression

                       RPARENS shift  238
                         COMMA shift  36

State 118:
    (155) abstract_declarator ::= pointer direct_abstract_declarator *
          direct_abstract_declarator ::= direct_abstract_declarator * LBRACE RBRACE
          direct_abstract_declarator ::= direct_abstract_declarator * LBRACE constant_expression RBRACE
          direct_abstract_declarator ::= direct_abstract_declarator * LPARENS RPARENS
          direct_abstract_declarator ::= direct_abstract_declarator * LPARENS parameter_type_list RPARENS

                       LPARENS shift  53
                        LBRACE shift  33
                     {default} reduce 155

State 119:
    (154) abstract_declarator ::= direct_abstract_declarator *
          direct_abstract_declarator ::= direct_abstract_declarator * LBRACE RBRACE
          direct_abstract_declarator ::= direct_abstract_declarator * LBRACE constant_expression RBRACE
          direct_abstract_declarator ::= direct_abstract_declarator * LPARENS RPARENS
          direct_abstract_declarator ::= direct_abstract_declarator * LPARENS parameter_type_list RPARENS

                       LPARENS shift  53
                        LBRACE shift  33
                     {default} reduce 154

State 120:
    (128) declarator ::= direct_declarator *
          direct_declarator ::= direct_declarator * LBRACKET constant_expression RBRACE
          direct_declarator ::= direct_declarator * LBRACKET RBRACE
          direct_declarator ::= direct_declarator * LPARENS parameter_type_list RPARENS
          direct_declarator ::= direct_declarator * LPARENS identifier_list RPARENS
          direct_declarator ::= direct_declarator * LPARENS RPARENS

                       LPARENS shift  49
                      LBRACKET shift  34
                      LBRACKET reduce 128 ** Parsing conflict **
                     {default} reduce 128

State 121:
          direct_declarator ::= direct_declarator LPARENS identifier_list * RPARENS
          identifier_list ::= identifier_list * COMMA IDENTIFIER

                       RPARENS shift  271
                         COMMA shift  168

State 122:
          enum_specifier ::= ENUM IDENTIFIER LBRACE enumerator_list * RBRACE
          enumerator_list ::= enumerator_list * COMMA enumerator

                         COMMA shift  101
                        RBRACE shift  275

State 123:
          enum_specifier ::= ENUM LBRACE enumerator_list * RBRACE
          enumerator_list ::= enumerator_list * COMMA enumerator

                         COMMA shift  101
                        RBRACE shift  279

State 124:
          enum_specifier ::= ENUM * LBRACE enumerator_list RBRACE
          enum_specifier ::= ENUM * IDENTIFIER LBRACE enumerator_list RBRACE
          enum_specifier ::= ENUM * IDENTIFIER

                    IDENTIFIER shift  170
                        LBRACE shift  97

State 125:
    (127) declarator ::= pointer direct_declarator *
          direct_declarator ::= direct_declarator * LBRACKET constant_expression RBRACE
          direct_declarator ::= direct_declarator * LBRACKET RBRACE
          direct_declarator ::= direct_declarator * LPARENS parameter_type_list RPARENS
          direct_declarator ::= direct_declarator * LPARENS identifier_list RPARENS
          direct_declarator ::= direct_declarator * LPARENS RPARENS

                       LPARENS shift  49
                      LBRACKET shift  34
                      LBRACKET reduce 127 ** Parsing conflict **
                     {default} reduce 127

State 126:
          struct_declaration ::= specifier_qualifier_list struct_declarator_list * SEMICOLON
          struct_declarator_list ::= struct_declarator_list * COMMA struct_declarator

                         COMMA shift  89
                     SEMICOLON shift  292

State 127:
          struct_or_union_specifier ::= struct_or_union * IDENTIFIER LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= struct_or_union * LBRACE struct_declaration_list RBRACE
          struct_or_union_specifier ::= struct_or_union * IDENTIFIER

                    IDENTIFIER shift  174
                        LBRACE shift  60

State 128:
          conditional_expression ::= logical_or_expression QUESTIONMARK expression * COLON conditional_expression
          expression ::= expression * COMMA assignment_expression

                         COMMA shift  41
                         COLON shift  42

State 129:
          logical_or_expression ::= logical_or_expression * OROR_OP logical_and_expression
     (56) conditional_expression ::= logical_or_expression *
          conditional_expression ::= logical_or_expression * QUESTIONMARK expression COLON conditional_expression

                       OROR_OP shift  44
                  QUESTIONMARK shift  29
                     {default} reduce 56

State 130:
          equality_expression ::= equality_expression * EQ_OP relational_expression
          equality_expression ::= equality_expression * NE_OP relational_expression
     (47) and_expression ::= and_expression AND equality_expression *

                         EQ_OP shift  58
                         NE_OP shift  57
                     {default} reduce 47

State 131:
          equality_expression ::= equality_expression * EQ_OP relational_expression
          equality_expression ::= equality_expression * NE_OP relational_expression
     (46) and_expression ::= equality_expression *

                         EQ_OP shift  58
                         NE_OP shift  57
                     {default} reduce 46

State 132:
          shift_expression ::= shift_expression * LEFT_OP additive_expression
          shift_expression ::= shift_expression * RIGHT_OP additive_expression
     (42) relational_expression ::= relational_expression GE_OP shift_expression *

                       LEFT_OP shift  72
                      RIGHT_OP shift  71
                     {default} reduce 42

State 133:
          shift_expression ::= shift_expression * LEFT_OP additive_expression
          shift_expression ::= shift_expression * RIGHT_OP additive_expression
     (41) relational_expression ::= relational_expression LE_OP shift_expression *

                       LEFT_OP shift  72
                      RIGHT_OP shift  71
                     {default} reduce 41

State 134:
          shift_expression ::= shift_expression * LEFT_OP additive_expression
          shift_expression ::= shift_expression * RIGHT_OP additive_expression
     (40) relational_expression ::= relational_expression MORE shift_expression *

                       LEFT_OP shift  72
                      RIGHT_OP shift  71
                     {default} reduce 40

State 135:
          shift_expression ::= shift_expression * LEFT_OP additive_expression
          shift_expression ::= shift_expression * RIGHT_OP additive_expression
     (39) relational_expression ::= relational_expression LESS shift_expression *

                       LEFT_OP shift  72
                      RIGHT_OP shift  71
                     {default} reduce 39

State 136:
          additive_expression ::= additive_expression * PLUS multiplicative_expression
          additive_expression ::= additive_expression * MINUS multiplicative_expression
     (37) shift_expression ::= shift_expression RIGHT_OP additive_expression *

                          PLUS shift  76
                         MINUS shift  75
                     {default} reduce 37

State 137:
          additive_expression ::= additive_expression * PLUS multiplicative_expression
          additive_expression ::= additive_expression * MINUS multiplicative_expression
     (36) shift_expression ::= shift_expression LEFT_OP additive_expression *

                          PLUS shift  76
                         MINUS shift  75
                     {default} reduce 36

State 138:
          shift_expression ::= shift_expression * LEFT_OP additive_expression
          shift_expression ::= shift_expression * RIGHT_OP additive_expression
     (38) relational_expression ::= shift_expression *

                       LEFT_OP shift  72
                      RIGHT_OP shift  71
                     {default} reduce 38

State 139:
          additive_expression ::= additive_expression * PLUS multiplicative_expression
          additive_expression ::= additive_expression * MINUS multiplicative_expression
     (35) shift_expression ::= additive_expression *

                          PLUS shift  76
                         MINUS shift  75
                     {default} reduce 35

State 140:
          postfix_expression ::= postfix_expression LBRACKET expression * RBRACKET
          expression ::= expression * COMMA assignment_expression

                      RBRACKET shift  338
                         COMMA shift  41

State 141:
          primary_expression ::= LPARENS expression * RPARENS
          expression ::= expression * COMMA assignment_expression

                       RPARENS shift  340
                         COMMA shift  41

State 142:
          declaration ::= declaration_specifiers init_declarator_list * SEMICOLON
          init_declarator_list ::= init_declarator_list * COMMA init_declarator

                         COMMA shift  90
                     SEMICOLON shift  345

State 143:
          jump_statement ::= BREAK * SEMICOLON

                     SEMICOLON shift  204

State 144:
          jump_statement ::= CONTINUE * SEMICOLON

                     SEMICOLON shift  205

State 145:
          jump_statement ::= GOTO IDENTIFIER * SEMICOLON

                     SEMICOLON shift  206

State 146:
          jump_statement ::= GOTO * IDENTIFIER SEMICOLON

                    IDENTIFIER shift  145

State 147:
          iteration_statement ::= FOR * LPARENS expression_statement expression_statement RPARENS statement
          iteration_statement ::= FOR * LPARENS expression_statement expression_statement expression RPARENS statement

                       LPARENS shift  18

State 148:
          iteration_statement ::= DO statement WHILE LPARENS expression RPARENS * SEMICOLON

                     SEMICOLON shift  208

State 149:
          iteration_statement ::= DO statement WHILE * LPARENS expression RPARENS SEMICOLON

                       LPARENS shift  25

State 150:
          iteration_statement ::= DO statement * WHILE LPARENS expression RPARENS SEMICOLON

                         WHILE shift  149

State 151:
          iteration_statement ::= WHILE * LPARENS expression RPARENS statement

                       LPARENS shift  26

State 152:
          selection_statement ::= SWITCH * LPARENS expression RPARENS statement

                       LPARENS shift  27

State 153:
    (189) selection_statement ::= IF LPARENS expression RPARENS statement *
          selection_statement ::= IF LPARENS expression RPARENS statement * ELSE statement

                          ELSE shift  12
                          ELSE reduce 189 ** Parsing conflict **
                     {default} reduce 189

State 154:
          selection_statement ::= IF * LPARENS expression RPARENS statement
          selection_statement ::= IF * LPARENS expression RPARENS statement ELSE statement

                       LPARENS shift  28

State 155:
          labeled_statement ::= DEFAULT * COLON statement

                         COLON shift  14

State 156:
          labeled_statement ::= CASE constant_expression * COLON statement

                         COLON shift  15

State 157:
      (0) primary_expression ::= IDENTIFIER *
          labeled_statement ::= IDENTIFIER * COLON statement

                         COLON shift  16
                     {default} reduce 0

State 158:
          cast_expression ::= LPARENS type_name * RPARENS cast_expression

                       RPARENS shift  77

State 159:
          postfix_expression ::= postfix_expression PTR_OP * IDENTIFIER

                    IDENTIFIER shift  234

State 160:
          postfix_expression ::= postfix_expression DOT * IDENTIFIER

                    IDENTIFIER shift  235

State 161:
          direct_abstract_declarator ::= LPARENS parameter_type_list * RPARENS

                       RPARENS shift  251

State 162:
          direct_abstract_declarator ::= LBRACE constant_expression * RBRACE

                        RBRACE shift  253

State 163:
          direct_abstract_declarator ::= LPARENS abstract_declarator * RPARENS

                       RPARENS shift  255

State 164:
          direct_abstract_declarator ::= direct_abstract_declarator LPARENS parameter_type_list * RPARENS

                       RPARENS shift  256

State 165:
          direct_abstract_declarator ::= direct_abstract_declarator LBRACE constant_expression * RBRACE

                        RBRACE shift  258

State 166:
          direct_declarator ::= LPARENS declarator * RPARENS

                       RPARENS shift  265

State 167:
    (142) parameter_type_list ::= parameter_list *
          parameter_type_list ::= parameter_list * COMMA ELLIPSIS
          parameter_list ::= parameter_list * COMMA parameter_declaration

                         COMMA shift  59
                     {default} reduce 142

State 168:
          identifier_list ::= identifier_list COMMA * IDENTIFIER

                    IDENTIFIER shift  270

State 169:
          direct_declarator ::= direct_declarator LPARENS parameter_type_list * RPARENS

                       RPARENS shift  272

State 170:
          enum_specifier ::= ENUM IDENTIFIER * LBRACE enumerator_list RBRACE
    (120) enum_specifier ::= ENUM IDENTIFIER *

                        LBRACE shift  96
                        LBRACE reduce 120 ** Parsing conflict **
                     {default} reduce 120

State 171:
    (123) enumerator ::= IDENTIFIER *
          enumerator ::= IDENTIFIER * EQUALS constant_expression

                        EQUALS shift  37
                     {default} reduce 123

State 172:
          direct_declarator ::= direct_declarator LBRACKET constant_expression * RBRACE

                        RBRACE shift  287

State 173:
    (115) struct_declarator ::= declarator *
          struct_declarator ::= declarator * COLON constant_expression

                         COLON shift  39
                     {default} reduce 115

State 174:
          struct_or_union_specifier ::= struct_or_union IDENTIFIER * LBRACE struct_declaration_list RBRACE
    (103) struct_or_union_specifier ::= struct_or_union IDENTIFIER *

                        LBRACE shift  61
                        LBRACE reduce 103 ** Parsing conflict **
                     {default} reduce 103

State 175:
          logical_and_expression ::= logical_and_expression * ANDAND_OP inclusive_or_expression
     (55) logical_or_expression ::= logical_or_expression OROR_OP logical_and_expression *

                     ANDAND_OP shift  47
                     {default} reduce 55

State 176:
          inclusive_or_expression ::= inclusive_or_expression * OR exclusive_or_expression
     (53) logical_and_expression ::= logical_and_expression ANDAND_OP inclusive_or_expression *

                            OR shift  48
                     {default} reduce 53

State 177:
          logical_and_expression ::= logical_and_expression * ANDAND_OP inclusive_or_expression
     (54) logical_or_expression ::= logical_and_expression *

                     ANDAND_OP shift  47
                     {default} reduce 54

State 178:
          exclusive_or_expression ::= exclusive_or_expression * XOR and_expression
     (51) inclusive_or_expression ::= inclusive_or_expression OR exclusive_or_expression *

                           XOR shift  50
                     {default} reduce 51

State 179:
          inclusive_or_expression ::= inclusive_or_expression * OR exclusive_or_expression
     (52) logical_and_expression ::= inclusive_or_expression *

                            OR shift  48
                     {default} reduce 52

State 180:
          and_expression ::= and_expression * AND equality_expression
     (49) exclusive_or_expression ::= exclusive_or_expression XOR and_expression *

                           AND shift  54
                     {default} reduce 49

State 181:
          exclusive_or_expression ::= exclusive_or_expression * XOR and_expression
     (50) inclusive_or_expression ::= exclusive_or_expression *

                           XOR shift  50
                     {default} reduce 50

State 182:
          and_expression ::= and_expression * AND equality_expression
     (48) exclusive_or_expression ::= and_expression *

                           AND shift  54
                     {default} reduce 48

State 183:
          unary_expression ::= SIZEOF LPARENS type_name * RPARENS

                       RPARENS shift  335

State 184:
     (84) init_declarator ::= declarator *
          init_declarator ::= declarator * EQUALS initializer

                        EQUALS shift  24
                     {default} reduce 84

State 185:
    (202) translation_unit ::= external_declaration *

                     {default} reduce 202

State 186:
    (209) function_definition ::= declarator compound_statement *

                     {default} reduce 209

State 187:
    (208) function_definition ::= declarator declaration_list compound_statement *

                     {default} reduce 208

State 188:
    (205) external_declaration ::= declaration *

                     {default} reduce 205

State 189:
    (204) external_declaration ::= function_definition *

                     {default} reduce 204

State 190:
    (203) translation_unit ::= translation_unit external_declaration *

                     {default} reduce 203

State 191:
    (207) function_definition ::= declaration_specifiers declarator compound_statement *

                     {default} reduce 207

State 192:
    (206) function_definition ::= declaration_specifiers declarator declaration_list compound_statement *

                     {default} reduce 206

State 193:
    (183) declaration_list ::= declaration *

                     {default} reduce 183

State 194:
    (185) statement_list ::= statement *

                     {default} reduce 185

State 195:
    (184) declaration_list ::= declaration_list declaration *

                     {default} reduce 184

State 196:
    (182) compound_statement ::= LBRACKET declaration_list statement_list RBRACKET *

                     {default} reduce 182

State 197:
    (181) compound_statement ::= LBRACKET declaration_list RBRACKET *

                     {default} reduce 181

State 198:
    (186) statement_list ::= statement_list statement *

                     {default} reduce 186

State 199:
    (180) compound_statement ::= LBRACKET statement_list RBRACKET *

                     {default} reduce 180

State 200:
    (179) compound_statement ::= LBRACKET RBRACKET *

                     {default} reduce 179

State 201:
    (194) iteration_statement ::= FOR LPARENS expression_statement expression_statement RPARENS statement *

                     {default} reduce 194

State 202:
    (199) jump_statement ::= RETURN SEMICOLON *

                     {default} reduce 199

State 203:
    (200) jump_statement ::= RETURN expression SEMICOLON *

                     {default} reduce 200

State 204:
    (198) jump_statement ::= BREAK SEMICOLON *

                     {default} reduce 198

State 205:
    (197) jump_statement ::= CONTINUE SEMICOLON *

                     {default} reduce 197

State 206:
    (196) jump_statement ::= GOTO IDENTIFIER SEMICOLON *

                     {default} reduce 196

State 207:
    (195) iteration_statement ::= FOR LPARENS expression_statement expression_statement expression RPARENS statement *

                     {default} reduce 195

State 208:
    (193) iteration_statement ::= DO statement WHILE LPARENS expression RPARENS SEMICOLON *

                     {default} reduce 193

State 209:
    (192) iteration_statement ::= WHILE LPARENS expression RPARENS statement *

                     {default} reduce 192

State 210:
    (191) selection_statement ::= SWITCH LPARENS expression RPARENS statement *

                     {default} reduce 191

State 211:
    (190) selection_statement ::= IF LPARENS expression RPARENS statement ELSE statement *

                     {default} reduce 190

State 212:
    (187) expression_statement ::= SEMICOLON *

                     {default} reduce 187

State 213:
    (178) labeled_statement ::= DEFAULT COLON statement *

                     {default} reduce 178

State 214:
    (177) labeled_statement ::= CASE constant_expression COLON statement *

                     {default} reduce 177

State 215:
    (176) labeled_statement ::= IDENTIFIER COLON statement *

                     {default} reduce 176

State 216:
    (175) statement ::= jump_statement *

                     {default} reduce 175

State 217:
    (174) statement ::= iteration_statement *

                     {default} reduce 174

State 218:
    (173) statement ::= selection_statement *

                     {default} reduce 173

State 219:
    (172) statement ::= expression_statement *

                     {default} reduce 172

State 220:
    (171) statement ::= compound_statement *

                     {default} reduce 171

State 221:
    (170) statement ::= labeled_statement *

                     {default} reduce 170

State 222:
    (188) expression_statement ::= expression SEMICOLON *

                     {default} reduce 188

State 223:
     (82) init_declarator_list ::= init_declarator *

                     {default} reduce 82

State 224:
    (168) initializer_list ::= initializer *

                     {default} reduce 168

State 225:
    (169) initializer_list ::= initializer_list COMMA initializer *

                     {default} reduce 169

State 226:
    (167) initializer ::= LBRACKET initializer_list COMMA RBRACKET *

                     {default} reduce 167

State 227:
    (166) initializer ::= LBRACKET initializer_list RBRACKET *

                     {default} reduce 166

State 228:
    (165) initializer ::= assignment_expression *

                     {default} reduce 165

State 229:
     (85) init_declarator ::= declarator EQUALS initializer *

                     {default} reduce 85

State 230:
     (27) cast_expression ::= LPARENS type_name RPARENS cast_expression *

                     {default} reduce 27

State 231:
     (72) expression ::= expression COMMA assignment_expression *

                     {default} reduce 72

State 232:
     (11) postfix_expression ::= postfix_expression DEC_OP *

                     {default} reduce 11

State 233:
     (10) postfix_expression ::= postfix_expression INC_OP *

                     {default} reduce 10

State 234:
      (9) postfix_expression ::= postfix_expression PTR_OP IDENTIFIER *

                     {default} reduce 9

State 235:
      (8) postfix_expression ::= postfix_expression DOT IDENTIFIER *

                     {default} reduce 8

State 236:
     (12) argument_expression_list ::= assignment_expression *

                     {default} reduce 12

State 237:
     (13) argument_expression_list ::= argument_expression_list COMMA assignment_expression *

                     {default} reduce 13

State 238:
      (7) postfix_expression ::= postfix_expression LPARENS argument_expression_list RPARENS *

                     {default} reduce 7

State 239:
      (6) postfix_expression ::= postfix_expression LPARENS RPARENS *

                     {default} reduce 6

State 240:
     (15) unary_expression ::= INC_OP unary_expression *

                     {default} reduce 15

State 241:
     (18) unary_expression ::= SIZEOF unary_expression *

                     {default} reduce 18

State 242:
    (152) type_name ::= specifier_qualifier_list abstract_declarator *

                     {default} reduce 152

State 243:
    (102) struct_or_union_specifier ::= struct_or_union LBRACE struct_declaration_list RBRACE *

                     {default} reduce 102

State 244:
    (106) struct_declaration_list ::= struct_declaration *

                     {default} reduce 106

State 245:
    (111) specifier_qualifier_list ::= type_qualifier specifier_qualifier_list *

                     {default} reduce 111

State 246:
    (109) specifier_qualifier_list ::= type_specifier specifier_qualifier_list *

                     {default} reduce 109

State 247:
    (113) struct_declarator_list ::= struct_declarator *

                     {default} reduce 113

State 248:
    (149) identifier_list ::= IDENTIFIER *

                     {default} reduce 149

State 249:
    (147) parameter_declaration ::= declaration_specifiers abstract_declarator *

                     {default} reduce 147

State 250:
    (146) parameter_declaration ::= declaration_specifiers declarator *

                     {default} reduce 146

State 251:
    (162) direct_abstract_declarator ::= LPARENS parameter_type_list RPARENS *

                     {default} reduce 162

State 252:
    (161) direct_abstract_declarator ::= LPARENS RPARENS *

                     {default} reduce 161

State 253:
    (158) direct_abstract_declarator ::= LBRACE constant_expression RBRACE *

                     {default} reduce 158

State 254:
    (157) direct_abstract_declarator ::= LBRACE RBRACE *

                     {default} reduce 157

State 255:
    (156) direct_abstract_declarator ::= LPARENS abstract_declarator RPARENS *

                     {default} reduce 156

State 256:
    (164) direct_abstract_declarator ::= direct_abstract_declarator LPARENS parameter_type_list RPARENS *

                     {default} reduce 164

State 257:
    (163) direct_abstract_declarator ::= direct_abstract_declarator LPARENS RPARENS *

                     {default} reduce 163

State 258:
    (160) direct_abstract_declarator ::= direct_abstract_declarator LBRACE constant_expression RBRACE *

                     {default} reduce 160

State 259:
    (159) direct_abstract_declarator ::= direct_abstract_declarator LBRACE RBRACE *

                     {default} reduce 159

State 260:
    (144) parameter_list ::= parameter_declaration *

                     {default} reduce 144

State 261:
    (140) type_qualifier_list ::= type_qualifier *

                     {default} reduce 140

State 262:
    (138) pointer ::= MULT pointer *

                     {default} reduce 138

State 263:
    (141) type_qualifier_list ::= type_qualifier_list type_qualifier *

                     {default} reduce 141

State 264:
    (139) pointer ::= MULT type_qualifier_list pointer *

                     {default} reduce 139

State 265:
    (130) direct_declarator ::= LPARENS declarator RPARENS *

                     {default} reduce 130

State 266:
    (129) direct_declarator ::= IDENTIFIER *

                     {default} reduce 129

State 267:
    (145) parameter_list ::= parameter_list COMMA parameter_declaration *

                     {default} reduce 145

State 268:
    (143) parameter_type_list ::= parameter_list COMMA ELLIPSIS *

                     {default} reduce 143

State 269:
    (135) direct_declarator ::= direct_declarator LPARENS RPARENS *

                     {default} reduce 135

State 270:
    (150) identifier_list ::= identifier_list COMMA IDENTIFIER *

                     {default} reduce 150

State 271:
    (134) direct_declarator ::= direct_declarator LPARENS identifier_list RPARENS *

                     {default} reduce 134

State 272:
    (133) direct_declarator ::= direct_declarator LPARENS parameter_type_list RPARENS *

                     {default} reduce 133

State 273:
    (126) type_qualifier ::= VOLATILE *

                     {default} reduce 126

State 274:
    (125) type_qualifier ::= CONST *

                     {default} reduce 125

State 275:
    (119) enum_specifier ::= ENUM IDENTIFIER LBRACE enumerator_list RBRACE *

                     {default} reduce 119

State 276:
    (121) enumerator_list ::= enumerator *

                     {default} reduce 121

State 277:
    (124) enumerator ::= IDENTIFIER EQUALS constant_expression *

                     {default} reduce 124

State 278:
    (122) enumerator_list ::= enumerator_list COMMA enumerator *

                     {default} reduce 122

State 279:
    (118) enum_specifier ::= ENUM LBRACE enumerator_list RBRACE *

                     {default} reduce 118

State 280:
     (88) storage_class_specifier ::= STATIC *

                     {default} reduce 88

State 281:
     (87) storage_class_specifier ::= EXTERN *

                     {default} reduce 87

State 282:
     (86) storage_class_specifier ::= TYPEDEF *

                     {default} reduce 86

State 283:
     (81) declaration_specifiers ::= type_qualifier declaration_specifiers *

                     {default} reduce 81

State 284:
     (79) declaration_specifiers ::= type_specifier declaration_specifiers *

                     {default} reduce 79

State 285:
     (77) declaration_specifiers ::= storage_class_specifier declaration_specifiers *

                     {default} reduce 77

State 286:
    (132) direct_declarator ::= direct_declarator LBRACKET RBRACE *

                     {default} reduce 132

State 287:
    (131) direct_declarator ::= direct_declarator LBRACKET constant_expression RBRACE *

                     {default} reduce 131

State 288:
    (116) struct_declarator ::= COLON constant_expression *

                     {default} reduce 116

State 289:
    (117) struct_declarator ::= declarator COLON constant_expression *

                     {default} reduce 117

State 290:
     (73) constant_expression ::= conditional_expression *

                     {default} reduce 73

State 291:
    (114) struct_declarator_list ::= struct_declarator_list COMMA struct_declarator *

                     {default} reduce 114

State 292:
    (108) struct_declaration ::= specifier_qualifier_list struct_declarator_list SEMICOLON *

                     {default} reduce 108

State 293:
    (107) struct_declaration_list ::= struct_declaration_list struct_declaration *

                     {default} reduce 107

State 294:
    (105) struct_or_union ::= UNION *

                     {default} reduce 105

State 295:
    (104) struct_or_union ::= STRUCT *

                     {default} reduce 104

State 296:
    (101) struct_or_union_specifier ::= struct_or_union IDENTIFIER LBRACE struct_declaration_list RBRACE *

                     {default} reduce 101

State 297:
    (100) type_specifier ::= TYPE_NAME *

                     {default} reduce 100

State 298:
     (99) type_specifier ::= enum_specifier *

                     {default} reduce 99

State 299:
     (98) type_specifier ::= struct_or_union_specifier *

                     {default} reduce 98

State 300:
     (97) type_specifier ::= UNSIGNED *

                     {default} reduce 97

State 301:
     (96) type_specifier ::= SIGNED *

                     {default} reduce 96

State 302:
     (95) type_specifier ::= DOUBLE *

                     {default} reduce 95

State 303:
     (94) type_specifier ::= FLOAT *

                     {default} reduce 94

State 304:
     (93) type_specifier ::= LONG *

                     {default} reduce 93

State 305:
     (92) type_specifier ::= INT *

                     {default} reduce 92

State 306:
     (91) type_specifier ::= SHORT *

                     {default} reduce 91

State 307:
     (90) type_specifier ::= CHAR *

                     {default} reduce 90

State 308:
     (89) type_specifier ::= VOID *

                     {default} reduce 89

State 309:
     (70) assignment_operator ::= OR_ASSIGN *

                     {default} reduce 70

State 310:
     (69) assignment_operator ::= XOR_ASSIGN *

                     {default} reduce 69

State 311:
     (68) assignment_operator ::= AND_ASSIGN *

                     {default} reduce 68

State 312:
     (67) assignment_operator ::= RIGHT_ASSIGN *

                     {default} reduce 67

State 313:
     (66) assignment_operator ::= LEFT_ASSIGN *

                     {default} reduce 66

State 314:
     (65) assignment_operator ::= SUB_ASSIGN *

                     {default} reduce 65

State 315:
     (64) assignment_operator ::= ADD_ASSIGN *

                     {default} reduce 64

State 316:
     (63) assignment_operator ::= MOD_ASSIGN *

                     {default} reduce 63

State 317:
     (62) assignment_operator ::= DIV_ASSIGN *

                     {default} reduce 62

State 318:
     (61) assignment_operator ::= MUL_ASSIGN *

                     {default} reduce 61

State 319:
     (60) assignment_operator ::= EQUALS *

                     {default} reduce 60

State 320:
     (59) assignment_expression ::= unary_expression assignment_operator assignment_expression *

                     {default} reduce 59

State 321:
     (71) expression ::= assignment_expression *

                     {default} reduce 71

State 322:
     (58) assignment_expression ::= conditional_expression *

                     {default} reduce 58

State 323:
     (57) conditional_expression ::= logical_or_expression QUESTIONMARK expression COLON conditional_expression *

                     {default} reduce 57

State 324:
     (31) multiplicative_expression ::= multiplicative_expression MOD cast_expression *

                     {default} reduce 31

State 325:
     (30) multiplicative_expression ::= multiplicative_expression DIV cast_expression *

                     {default} reduce 30

State 326:
     (29) multiplicative_expression ::= multiplicative_expression MULT cast_expression *

                     {default} reduce 29

State 327:
     (26) cast_expression ::= unary_expression *

                     {default} reduce 26

State 328:
     (28) multiplicative_expression ::= cast_expression *

                     {default} reduce 28

State 329:
     (25) unary_operator ::= BANG *

                     {default} reduce 25

State 330:
     (24) unary_operator ::= TILDE *

                     {default} reduce 24

State 331:
     (23) unary_operator ::= MINUS *

                     {default} reduce 23

State 332:
     (22) unary_operator ::= PLUS *

                     {default} reduce 22

State 333:
     (21) unary_operator ::= MULT *

                     {default} reduce 21

State 334:
     (20) unary_operator ::= AND *

                     {default} reduce 20

State 335:
     (19) unary_expression ::= SIZEOF LPARENS type_name RPARENS *

                     {default} reduce 19

State 336:
     (17) unary_expression ::= unary_operator cast_expression *

                     {default} reduce 17

State 337:
     (16) unary_expression ::= DEC_OP unary_expression *

                     {default} reduce 16

State 338:
      (5) postfix_expression ::= postfix_expression LBRACKET expression RBRACKET *

                     {default} reduce 5

State 339:
      (4) postfix_expression ::= primary_expression *

                     {default} reduce 4

State 340:
      (3) primary_expression ::= LPARENS expression RPARENS *

                     {default} reduce 3

State 341:
      (2) primary_expression ::= STRING_LITERAL *

                     {default} reduce 2

State 342:
      (1) primary_expression ::= CONSTANT *

                     {default} reduce 1

State 343:
      (0) primary_expression ::= IDENTIFIER *

                     {default} reduce 0

State 344:
     (83) init_declarator_list ::= init_declarator_list COMMA init_declarator *

                     {default} reduce 83

State 345:
     (75) declaration ::= declaration_specifiers init_declarator_list SEMICOLON *

                     {default} reduce 75

State 346:
     (74) declaration ::= declaration_specifiers SEMICOLON *

                     {default} reduce 74

----------------------------------------------------
Symbols:
    0: $:
    1: IDENTIFIER
    2: CONSTANT
    3: STRING_LITERAL
    4: LPARENS
    5: RPARENS
    6: LBRACKET
    7: RBRACKET
    8: DOT
    9: PTR_OP
   10: INC_OP
   11: DEC_OP
   12: COMMA
   13: SIZEOF
   14: AND
   15: MULT
   16: PLUS
   17: MINUS
   18: TILDE
   19: BANG
   20: DIV
   21: MOD
   22: LEFT_OP
   23: RIGHT_OP
   24: LESS
   25: MORE
   26: LE_OP
   27: GE_OP
   28: EQ_OP
   29: NE_OP
   30: XOR
   31: OR
   32: ANDAND_OP
   33: OROR_OP
   34: QUESTIONMARK
   35: COLON
   36: EQUALS
   37: MUL_ASSIGN
   38: DIV_ASSIGN
   39: MOD_ASSIGN
   40: ADD_ASSIGN
   41: SUB_ASSIGN
   42: LEFT_ASSIGN
   43: RIGHT_ASSIGN
   44: AND_ASSIGN
   45: XOR_ASSIGN
   46: OR_ASSIGN
   47: SEMICOLON
   48: TYPEDEF
   49: EXTERN
   50: STATIC
   51: VOID
   52: CHAR
   53: SHORT
   54: INT
   55: LONG
   56: FLOAT
   57: DOUBLE
   58: SIGNED
   59: UNSIGNED
   60: TYPE_NAME
   61: LBRACE
   62: RBRACE
   63: STRUCT
   64: UNION
   65: ENUM
   66: CONST
   67: VOLATILE
   68: ELLIPSIS
   69: CASE
   70: DEFAULT
   71: IF
   72: ELSE
   73: SWITCH
   74: WHILE
   75: DO
   76: FOR
   77: GOTO
   78: CONTINUE
   79: BREAK
   80: RETURN
   81: error:
   82: primary_expression: IDENTIFIER CONSTANT STRING_LITERAL LPARENS
   83: expression: IDENTIFIER CONSTANT STRING_LITERAL LPARENS INC_OP DEC_OP SIZEOF AND MULT PLUS MINUS TILDE BANG
   84: postfix_expression: IDENTIFIER CONSTANT STRING_LITERAL LPARENS
   85: argument_expression_list: IDENTIFIER CONSTANT STRING_LITERAL LPARENS INC_OP DEC_OP SIZEOF AND MULT PLUS MINUS TILDE BANG
   86: assignment_expression: IDENTIFIER CONSTANT STRING_LITERAL LPARENS INC_OP DEC_OP SIZEOF AND MULT PLUS MINUS TILDE BANG
   87: unary_expression: IDENTIFIER CONSTANT STRING_LITERAL LPARENS INC_OP DEC_OP SIZEOF AND MULT PLUS MINUS TILDE BANG
   88: unary_operator: AND MULT PLUS MINUS TILDE BANG
   89: cast_expression: IDENTIFIER CONSTANT STRING_LITERAL LPARENS INC_OP DEC_OP SIZEOF AND MULT PLUS MINUS TILDE BANG
   90: type_name: VOID CHAR SHORT INT LONG FLOAT DOUBLE SIGNED UNSIGNED TYPE_NAME STRUCT UNION ENUM CONST VOLATILE
   91: multiplicative_expression: IDENTIFIER CONSTANT STRING_LITERAL LPARENS INC_OP DEC_OP SIZEOF AND MULT PLUS MINUS TILDE BANG
   92: additive_expression: IDENTIFIER CONSTANT STRING_LITERAL LPARENS INC_OP DEC_OP SIZEOF AND MULT PLUS MINUS TILDE BANG
   93: shift_expression: IDENTIFIER CONSTANT STRING_LITERAL LPARENS INC_OP DEC_OP SIZEOF AND MULT PLUS MINUS TILDE BANG
   94: relational_expression: IDENTIFIER CONSTANT STRING_LITERAL LPARENS INC_OP DEC_OP SIZEOF AND MULT PLUS MINUS TILDE BANG
   95: equality_expression: IDENTIFIER CONSTANT STRING_LITERAL LPARENS INC_OP DEC_OP SIZEOF AND MULT PLUS MINUS TILDE BANG
   96: and_expression: IDENTIFIER CONSTANT STRING_LITERAL LPARENS INC_OP DEC_OP SIZEOF AND MULT PLUS MINUS TILDE BANG
   97: exclusive_or_expression: IDENTIFIER CONSTANT STRING_LITERAL LPARENS INC_OP DEC_OP SIZEOF AND MULT PLUS MINUS TILDE BANG
   98: inclusive_or_expression: IDENTIFIER CONSTANT STRING_LITERAL LPARENS INC_OP DEC_OP SIZEOF AND MULT PLUS MINUS TILDE BANG
   99: logical_and_expression: IDENTIFIER CONSTANT STRING_LITERAL LPARENS INC_OP DEC_OP SIZEOF AND MULT PLUS MINUS TILDE BANG
  100: logical_or_expression: IDENTIFIER CONSTANT STRING_LITERAL LPARENS INC_OP DEC_OP SIZEOF AND MULT PLUS MINUS TILDE BANG
  101: conditional_expression: IDENTIFIER CONSTANT STRING_LITERAL LPARENS INC_OP DEC_OP SIZEOF AND MULT PLUS MINUS TILDE BANG
  102: assignment_operator: EQUALS MUL_ASSIGN DIV_ASSIGN MOD_ASSIGN ADD_ASSIGN SUB_ASSIGN LEFT_ASSIGN RIGHT_ASSIGN AND_ASSIGN XOR_ASSIGN OR_ASSIGN
  103: constant_expression: IDENTIFIER CONSTANT STRING_LITERAL LPARENS INC_OP DEC_OP SIZEOF AND MULT PLUS MINUS TILDE BANG
  104: declaration: TYPEDEF EXTERN STATIC VOID CHAR SHORT INT LONG FLOAT DOUBLE SIGNED UNSIGNED TYPE_NAME STRUCT UNION ENUM CONST VOLATILE
  105: declaration_specifiers: TYPEDEF EXTERN STATIC VOID CHAR SHORT INT LONG FLOAT DOUBLE SIGNED UNSIGNED TYPE_NAME STRUCT UNION ENUM CONST VOLATILE
  106: init_declarator_list: IDENTIFIER LPARENS MULT
  107: storage_class_specifier: TYPEDEF EXTERN STATIC
  108: type_specifier: VOID CHAR SHORT INT LONG FLOAT DOUBLE SIGNED UNSIGNED TYPE_NAME STRUCT UNION ENUM
  109: type_qualifier: CONST VOLATILE
  110: init_declarator: IDENTIFIER LPARENS MULT
  111: declarator: IDENTIFIER LPARENS MULT
  112: initializer: IDENTIFIER CONSTANT STRING_LITERAL LPARENS LBRACKET INC_OP DEC_OP SIZEOF AND MULT PLUS MINUS TILDE BANG
  113: struct_or_union_specifier: STRUCT UNION
  114: enum_specifier: ENUM
  115: struct_or_union: STRUCT UNION
  116: struct_declaration_list: VOID CHAR SHORT INT LONG FLOAT DOUBLE SIGNED UNSIGNED TYPE_NAME STRUCT UNION ENUM CONST VOLATILE
  117: struct_declaration: VOID CHAR SHORT INT LONG FLOAT DOUBLE SIGNED UNSIGNED TYPE_NAME STRUCT UNION ENUM CONST VOLATILE
  118: specifier_qualifier_list: VOID CHAR SHORT INT LONG FLOAT DOUBLE SIGNED UNSIGNED TYPE_NAME STRUCT UNION ENUM CONST VOLATILE
  119: struct_declarator_list: IDENTIFIER LPARENS MULT COLON
  120: struct_declarator: IDENTIFIER LPARENS MULT COLON
  121: enumerator_list: IDENTIFIER
  122: enumerator: IDENTIFIER
  123: pointer: MULT
  124: direct_declarator: IDENTIFIER LPARENS
  125: parameter_type_list: TYPEDEF EXTERN STATIC VOID CHAR SHORT INT LONG FLOAT DOUBLE SIGNED UNSIGNED TYPE_NAME STRUCT UNION ENUM CONST VOLATILE
  126: identifier_list: IDENTIFIER
  127: type_qualifier_list: CONST VOLATILE
  128: parameter_list: TYPEDEF EXTERN STATIC VOID CHAR SHORT INT LONG FLOAT DOUBLE SIGNED UNSIGNED TYPE_NAME STRUCT UNION ENUM CONST VOLATILE
  129: parameter_declaration: TYPEDEF EXTERN STATIC VOID CHAR SHORT INT LONG FLOAT DOUBLE SIGNED UNSIGNED TYPE_NAME STRUCT UNION ENUM CONST VOLATILE
  130: abstract_declarator: LPARENS MULT LBRACE
  131: direct_abstract_declarator: LPARENS LBRACE
  132: initializer_list: IDENTIFIER CONSTANT STRING_LITERAL LPARENS LBRACKET INC_OP DEC_OP SIZEOF AND MULT PLUS MINUS TILDE BANG
  133: statement: IDENTIFIER CONSTANT STRING_LITERAL LPARENS LBRACKET INC_OP DEC_OP SIZEOF AND MULT PLUS MINUS TILDE BANG SEMICOLON CASE DEFAULT IF SWITCH WHILE DO FOR GOTO CONTINUE BREAK RETURN
  134: labeled_statement: IDENTIFIER CASE DEFAULT
  135: compound_statement: LBRACKET
  136: expression_statement: IDENTIFIER CONSTANT STRING_LITERAL LPARENS INC_OP DEC_OP SIZEOF AND MULT PLUS MINUS TILDE BANG SEMICOLON
  137: selection_statement: IF SWITCH
  138: iteration_statement: WHILE DO FOR
  139: jump_statement: GOTO CONTINUE BREAK RETURN
  140: statement_list: IDENTIFIER CONSTANT STRING_LITERAL LPARENS LBRACKET INC_OP DEC_OP SIZEOF AND MULT PLUS MINUS TILDE BANG SEMICOLON CASE DEFAULT IF SWITCH WHILE DO FOR GOTO CONTINUE BREAK RETURN
  141: declaration_list: TYPEDEF EXTERN STATIC VOID CHAR SHORT INT LONG FLOAT DOUBLE SIGNED UNSIGNED TYPE_NAME STRUCT UNION ENUM CONST VOLATILE
  142: brightc_file: IDENTIFIER LPARENS MULT TYPEDEF EXTERN STATIC VOID CHAR SHORT INT LONG FLOAT DOUBLE SIGNED UNSIGNED TYPE_NAME STRUCT UNION ENUM CONST VOLATILE
  143: translation_unit: IDENTIFIER LPARENS MULT TYPEDEF EXTERN STATIC VOID CHAR SHORT INT LONG FLOAT DOUBLE SIGNED UNSIGNED TYPE_NAME STRUCT UNION ENUM CONST VOLATILE
  144: external_declaration: IDENTIFIER LPARENS MULT TYPEDEF EXTERN STATIC VOID CHAR SHORT INT LONG FLOAT DOUBLE SIGNED UNSIGNED TYPE_NAME STRUCT UNION ENUM CONST VOLATILE
  145: function_definition: IDENTIFIER LPARENS MULT TYPEDEF EXTERN STATIC VOID CHAR SHORT INT LONG FLOAT DOUBLE SIGNED UNSIGNED TYPE_NAME STRUCT UNION ENUM CONST VOLATILE
